<?php/*** New Products Uploading Template*/class ProductUploadsEdit {            public function __construct() {        //Load Add new Product Template         add_action('wp_footer', array($this, 'product_uploads_template'));        //Load Product Edit Template        add_action('wp_footer', array($this, 'product_edit_template'));        //Upload New Product AJAX Handler        add_action('wp_ajax_upload_edit_product', array($this, 'upload_edit_product_ajax'));        //Load Product Edit Information AJAX Handler        add_action('wp_ajax_load_edit_product_information', array($this, 'load_edit_product_information_ajax'));        add_action('wp_ajax_get_sub_categories', array($this, 'get_sub_categories_handler'));                //Get Product Categories Relationship AJAX Handler        add_action('wp_ajax_get_categories_relationship', array($this, 'get_categories_relationship'));        //Get Sub Categories Terms AJAX Handler        add_action('wp_ajax_get_sub_categories_terms', array($this, 'get_sub_categories_terms_ajax'));                //Set Sub Category New Term AJAX Handler        add_action('wp_ajax_set_sub_attribute_new_term', array($this, 'set_sub_attribute_new_term_ajax'));        //Product Upload Images AJAX Handlers        add_action('wp_ajax_product_images_upload', array($this, 'product_images_upload_ajax'));        add_action('wp_ajax_delete_product_image', array($this, 'delete_product_image_ajax'));        //Upload Clothing Size Chart Image        add_action('wp_ajax_upload_size_chart_images', array($this, 'upload_size_chart_images_ajax'));        add_action('wp_ajax_refresh_product_attributes', array($this, 'refresh_product_attributes'));    }    //Product Upload Template    public function product_uploads_template() {        ob_start();        ?>        <script type="text/html" id="product_upload_tml">        <?php        if(is_user_logged_in()) {        $merchant_user = wp_get_current_user();        if($merchant_user->roles[0] == 'merchant') {        ?>        <div class="product_uploads_container">            <div class="container" style="">                <h2 class="page-header"><i class="icon ion-android-archive"></i>Upload Product</h2>                                <div class="alert alert-success error_success_messages" role="alert">                  <ul></ul>                </div>                <div class="alert alert-danger error_success_messages" role="alert">                  <ul></ul>                </div>                <div class="product_uploading_wrap">                    <form action="" method="post" class="upload_edit_product_from">                        <div class="form-group col-sm-12">                            <div id="upload_product_images_container" class="upload_product_images_wrap col-sm-7 col-md-7 col-lg-7">                                <div class="upload_images_area" id="select_drop_upload_images">                                    <b>Drag</b> and <b>Drop</b> Product Images Here to Upload                                </div>                                <div id="upload_images_preview">                                                                    </div>                                <div class="clearfix"></div>                            </div>                            <div id="upload-imagelist"><ul></ul></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_style_no" class='label_input'>STYLE NO<span class="required"> * </span>:</label>                            <div class='label_input'>                            <input type="text" class="form-control" name="product_style_no" id="product_style_no" value="" />                            <button type="button" class="fa-question-circle fa popover-dismiss" data-toggle="popover" data-placement="top" title="Information" data-content="SKU/ID refers to a Stock-keeping unit, a unique identifier for each distinct product and service that can be purchased."></button>                            </div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_title" class='label_input'>PRODUCT NAME<span class="required"> * </span>:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_title" id="product_title" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-12">                            <label for="product_description" class='label_input'>PRODUCT DESCRIPTION :</label>                            <div class='label_input'><textarea class="form-control" name="product_description" id="product_description"></textarea></div>                            <div class="clearfix"></div>                        </div>                                            <div class="form-group col-sm-6 col-xs-12">                        <label for="product_metal" class='label_input'>METAL COLOR:<span class="required"> * </span>:</label>                        <div class='label_input'>                        <?php                        $myterms = get_terms('metal', array('hide_empty'=>false));                            echo "<select class='form-control' name='product_metal' id='product_metal'>";                            echo "<option value=''>Please Select Metal</option>";                            foreach($myterms as $term){                                $term_slug=$term->slug;                                $term_name =$term->name;                                echo "<option value='".$term_slug."'>".$term_name."</option>";                            }                        echo "</select>"; ?>                           <!--<input type="text" class="form-control" name="product_metal" id="product_metal" value="" />--></div>                        <div class="clearfix"></div>                    </div>                    <div class="form-group col-sm-6 col-xs-12">                        <label for="product_purity" class='label_input'>METAL PURITY :<span class="required"> * </span>:</label>                        <div class='label_input'>                             <?php                        $myterms = get_terms('metal_purity', array('hide_empty'=>false));                            echo "<select class='form-control' name='product_purity' id='product_purity'>";                            echo "<option value=''>Please Select Metal Purity</option>";                            foreach($myterms as $term){                                $term_slug=$term->slug;                                $term_name =$term->name;                                echo "<option value='".$term_slug."'>".$term_name."</option>";                            }                        echo "</select>"; ?>                             <!--<input type="text" class="form-control" name="product_purity" id="product_purity" value="" />-->                        </div>                        <div class="clearfix"></div>                    </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_round_dim_pcs" class='label_input'>ROUND DIAMOND PIECES :</label>                            <div class='label_input'><input type="text" class="form-control" name="product_round_dim_pcs" id="product_round_dim_pcs" value="" /></div>                            <div class="clearfix"></div>                        </div>                         <div class="form-group col-sm-6 col-xs-12">                            <label for="product_round_dim_wt" class='label_input'>ROUND DIAMOND WEIGHT(CARAT):</label>                            <div class='label_input'><input type="text" class="form-control" name="product_round_dim_wt" id="product_round_dim_wt" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_other_diam_nm" class='label_input'>OTHER DIAMOND NAME:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_other_diam_nm" id="product_other_diam_nm" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_other_diam_pcs" class='label_input'>OTHER DIAMOND PIECES:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_other_diam_pcs" id="product_other_diam_pcs" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_other_diam_pcs_wt" class='label_input'>OTHER DIAMOND PIECES WEIGHT(CARAT):</label>                            <div class='label_input'><input type="text" class="form-control" name="product_other_diam_pcs_wt" id="product_other_diam_pcs_wt" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_diam_color" class='label_input'>DIAMOND COLOR:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_diam_color" id="product_diam_color" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_diam_clarity" class='label_input'>DIAMOND CLARITY:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_diam_clarity" id="product_diam_clarity" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_gemst_nm" class='label_input'>GEMSTONE NAME:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_gemst_nm" id="product_gemst_nm" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_gemst_pcs" class='label_input'>GEMSTONE PIECES:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_gemst_pcs" id="product_gemst_pcs" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_gemst_wt" class='label_input'>GEMSTONE WEIGHT(CARAT):</label>                            <div class='label_input'><input type="text" class="form-control" name="product_gemst_wt" id="product_gemst_wt" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_totalwt" class='label_input'>PRODUCT GROSS WEIGHT(GRAMS) :<span class="required"> * </span>:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_totalwt" id="product_totalwt" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_metalwt" class='label_input'>NET WEIGHT METAL(GRAMS):<span class="required"> * </span>:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_metalwt" id="product_metalwt" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                           <label for="product_stoneprice" class='label_input'>DIAMOND & STONE VALUE:</label>                           <div class='label_input'><input type="text" class="form-control" name="product_stoneprice" id="product_stoneprice" value="" /></div>                           <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_dimension" class='label_input'>DIMENSION L/W(CENTIMETER) :<span class="required"> * </span>:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_dimension" id="product_dimension" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                           <label for="product_lb_charge" class='label_input'>LABOUR ACTUAL CHARGE :</label>                           <div class='label_input'><input type="text" class="form-control" name="product_lb_charge" id="product_lb_charge" value="" /></div>                           <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_lb_p_charge" class='label_input'>LABOUR PERCENTAGE CHARGE   :</label>                            <div class='label_input'><input type="text" class="form-control" name="product_lb_p_charge" id="product_lb_p_charge" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_set_nm" class='label_input'>PRODUCT SET NAME :</label>                            <div class='label_input'><input type="text" class="form-control" name="product_set_nm" id="product_set_nm" value="" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_ship_day" class='label_input'>SHIPS IN DAYS :</label>                            <div class='label_input'><input type="text" class="form-control" name="product_ship_day" id="product_ship_day" value="" /></div>                            <div class="clearfix"></div>                        </div>                            <div class="product_occassion_taxonomy">                <div class="row" >                <div class="col-sm-12" >                <?php                                            $taxonomies = get_taxonomies(array('public' => true, '_builtin' => false));                                    // print_r($taxonomies);                                    foreach ($taxonomies as $taxonomy) {                                        if($taxonomy != 'diamonds' && $taxonomy != 'carats' && $taxonomy != 'colour' && $taxonomy != 'cut' && $taxonomy != 'clarity' && $taxonomy != 'metal' && $taxonomy != 'metal_purity' && $taxonomy != 'sets' && $taxonomy != 'collections' && $taxonomy != 'specials' && $taxonomy != 'vendor_diamond' && $taxonomy != 'product_tag' && $taxonomy != 'featured_item_category'){                                        $terms = get_terms($taxonomy, 'orderby=count&hide_empty=0');                                        if (!empty($terms) && !is_wp_error($terms)) {                                            ?>                                            <div class="col-sm-3 col-xs-12" id="product_<?php echo $taxonomy; ?>">                                                <label for="product_categories" class='label_input'>Product <?php echo $taxonomy ?> : </label>                                                <?php foreach ($terms as $term) { ?>                                                   <label><input type="checkbox" name="select_taxonomy_for_<?php echo $taxonomy; ?>[]" value="<?php echo $term->term_id; ?>"><?php echo $term->name; ?></label><br>                                            <?php } ?> </div>                                        <?php }                                        }                                    } ?>                                </div>                                <div class="clearfix"></div>                                </div>                                </div>                                <div class="form-group product_publish_row col-sm-6 col-xs-12">                            <div class='label_input'><input type='checkbox' name='product_publish' id='product_publish' value='yes' /><label for="product_publish" class='label_input'>Send product for review</label></div>                            <div class="clearfix"></div>                        </div><!--                        <div class="form-group product_categories_wrap col-sm-6 col-xs-12">                            <label for="product_categories" class='label_input'>Product Categories :</label>                            <div class="row">                            <div class="col-sm-12" id="product_main_category">                                <div class="custom_select">                                <?php//                                echo $this->get_product_categories();                                ?>                                </div>                                <div id="sub_categories">                                                                </div>                            </div>                            <div class="col-sm-12 sortables_product_sub_categories" id="categories_relationships">                                                            </div>                            <div class="clearfix"></div>                            </div>                        </div>-->                        <div class="form-group size_chart_option" style="display: none;">                            <label for="size_chart" class='label_input' style="background: none repeat scroll 0 0 slategrey; color: #fff; font-size: 15px; font-weight: 500; padding: 7px 15px;">Size Guide Chart :</label>                            <div class="row">                                <div class="col-sm-12">                                                                        <label for="size_chart" class='label_input'>Insert Size Chart Table :</label>                                    <div class='label_input'><textarea class="form-control" name="clothing_size_chart" id="clothing_size_chart"></textarea></div>                                                                                                    <div class="row">                                        <div class="col-sm-7">                                            <label for="size_chart" class='label_input'>Insert Mesurement Guide Option :</label>                                            <div class='label_input'><textarea class="form-control" name="measurement_guides" id="measurement_guides"></textarea></div>                                        </div>                                        <div id="upload_size_chart_image_wrap" class="col-sm-5" style="border: 1px solid #ddd; text-align: center; padding-top: 15px; padding-bottom: 15px; margin-top: 30px; cursor: pointer;">                                            <div id="sizechart_upload_images_area">                                                Upload Here Your Clothing Size Chart Image                                            </div>                                            <div id="sizechartimagepreview">                                            </div>                                            </div>                                         <div class="clearfix"></div>                                       </div>                                    <div class="clearfix"></div>                                </div>                                </div>                        </div>                                                <div style="border-top: 1px solid #ddd; padding:15px 0px;float:left;width:100%;"></div>                                                <div class="form-group" style="text-align: center; position: relative;float:left;width:100%;">                            <input type="hidden" name="form_action" value="upload_product" />                            <input type="submit" class="button product_upload" value="Upload Product" />                            <i class="fa fa-cog fa-spin update_product_loader"></i>                        </div>                    </form>                </div>            </div>          </div>        <?php        }        }        ?>        </script>        <?php        echo ob_get_clean();    }    //Product Edit Template    public function product_edit_template() {        ob_start();        ?>        <script type="text/html" id="product_edit_tml">        <?php        if(is_user_logged_in()) {        $merchant_user = wp_get_current_user();        if($merchant_user->roles[0] == 'merchant') {        ?>        <div class="product_uploads_container">            <div class="container" style="">                <h2 class="page-header"><i class="icon ion-edit"></i>Edit Product</h2>                                <div class="alert alert-success error_success_messages" role="alert">                  <ul></ul>                </div>                <div class="alert alert-danger error_success_messages" role="alert">                  <ul></ul>                </div>                <div class="product_uploading_wrap">                    <div id="product_edit_wrap">                                        </div>                </div>            </div>          </div>        <?php        }        }        ?>        </script>        <?php        echo ob_get_clean();    }    //Load Edit Product Information    public function load_edit_product_information_ajax() {        global $wpdb;        ob_start();        $productid = $_GET['product_id'];        $product = get_post($productid);                        $product_status = $product->post_status;        $product_description = $product->post_excerpt;        $product_title = get_post_meta($productid, 'product_title', true);        $product_style_no = get_post_meta($productid, 'style_no', true);        $product_metal = get_post_meta($productid, 'metal_color', true);        $product_purity = get_post_meta($productid, 'metal_purity', true);        $product_round_dim_pcs = get_post_meta($productid, 'round_diamond_pcs', true);        $product_round_dim_wt = get_post_meta($productid, 'round_diamond_weight(carat)', true);                $product_other_diam_pcs = get_post_meta($productid, 'other_diamond_pieces', true);        $product_other_diam_pcs_wt = get_post_meta($productid, 'other_diamond_pieces_weight(carat)', true);        $product_diam_color = get_post_meta($productid, 'diamond_color', true);        $product_diam_clarity = get_post_meta($productid, 'diamond_clarity', true);        $product_gemst_nm = get_post_meta($productid, 'gemstone_name', true);        $product_gemst_pcs = get_post_meta($productid, 'gemstone_pieces', true);        $product_gemst_wt = get_post_meta($productid, 'gemstone_weight(carat)', true);        $product_totalwt = get_post_meta($productid, 'total_wt._(gms)', true);        $product_metalwt = get_post_meta($productid, 'metal_wt._(gms)', true);        $product_stoneprice = get_post_meta($productid, 'diamond_&_stone_value', true);        $product_dimension = get_post_meta($productid, 'dimensions', true);        $product_lb_charge = get_post_meta($productid, 'labour_charge', true);//        $product_lb_charge = get_post_meta($product_id, 'labour_charge', true);        $product_set_nm = get_post_meta($productid, 'set_name', true);        $product_ship_day = get_post_meta($productid, 'ships_in_days', true);        $term_list = wp_get_post_terms($productid, 'vendor_diamond', array("fields" => "all"));                   $other_diamond_name =array();                   foreach ($term_list as $term) {                      $other_diamond_name[] = $term->slug;                   }//                   print_r($other_diamond_name);                   $other_diamond_name = implode(',', $other_diamond_name);        ?>        <form action="" method="post" class="upload_edit_product_from">            <div class="form-group col-sm-12">                <div id="upload_product_images_container" class="upload_product_images_wrap col-sm-7 col-md-7 col-lg-7">                    <div class="upload_images_area upload_images_area_edit" id="select_drop_upload_images">                        <b>Drag</b> and <b>Drop</b> Product Images Here to Upload                    </div>                    <div id="upload_images_preview">                        <?php                        $featured_image_id = get_post_thumbnail_id( $productid );                        if($featured_image_id!="") {                        $gallery_images = get_post_meta($productid, '_product_image_gallery', true);                        if($gallery_images!="") {                            $images = $featured_image_id.','.$gallery_images;                        } else {                            $images = $featured_image_id;                        }                        $images = explode(",", $images);                        foreach($images as $image_id) {                        $image = wp_get_attachment_image_src( $image_id, 'thumbnail' );                        ?>                        <div class="imagepreview productimagessortables col-sm-3 col-xs-3">                        <img src="<?php echo $image[0]; ?>" width="<?php echo $image[1]; ?>" height="<?php echo $image[2]; ?>" class="img-responsive" />                        <a href="javascript:void(0);" title="Delete Image" class="product_image_delete fa-times-circle-o fa" data-upload_id="<?php echo $image_id; ?>"></a>                        <input type="hidden" name="product_images[]" value="<?php echo $image_id; ?>" />                        </div>                        <?php }                         }                        ?>                    </div>                    <div class="clearfix"></div>                </div>                                            <div id="upload-imagelist"><ul></ul></div>                <div class="clearfix"></div>            </div>           <div class="form-group col-sm-6 col-xs-12">                            <label for="product_style_no" class='label_input'>STYLE NO<span class="required"> * </span>:</label>                            <div class='label_input'>                            <input type="text" class="form-control" name="product_style_no" id="product_style_no" value="<?php echo $product_style_no;?>" />                            <button type="button" class="fa-question-circle fa popover-dismiss" data-toggle="popover" data-placement="top" title="Information" data-content="SKU/ID refers to a Stock-keeping unit, a unique identifier for each distinct product and service that can be purchased."></button>                            </div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_title" class='label_input'>PRODUCT NAME<span class="required"> * </span>:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_title" id="product_title" value="<?php echo $product_title;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-12">                            <label for="product_description" class='label_input'>PRODUCT DESCRIPTION :</label>                            <div class='label_input'><textarea class="form-control" name="product_description" id="product_description"><?php echo $product_description;?></textarea></div>                            <div class="clearfix"></div>                        </div>                                            <div class="form-group col-sm-6 col-xs-12">                        <label for="product_metal" class='label_input'>METAL COLOR:<span class="required"> * </span>:</label>                        <div class='label_input'>                        <?php                        $myterms = get_terms('metal', array('hide_empty'=>false));                            echo "<select class='form-control' name='product_metal' id='product_metal'>";                            echo "<option value=''>Please Select Metal</option>";                            foreach($myterms as $term){                                $selected ='';                                $term_slug=$term->slug;                                $term_name =$term->name;                                if($product_metal == $term_slug){                                     $selected ='selected';                                }                                echo "<option value='".$term_slug."' $selected>".$term_name."</option>";                            }                        echo "</select>"; ?>                           <!--<input type="text" class="form-control" name="product_metal" id="product_metal" value="" />--></div>                        <div class="clearfix"></div>                    </div>                    <div class="form-group col-sm-6 col-xs-12">                        <label for="product_purity" class='label_input'>METAL PURITY :<span class="required"> * </span>:</label>                        <div class='label_input'>                             <?php                        $myterms = get_terms('metal_purity', array('hide_empty'=>false));                            echo "<select class='form-control' name='product_purity' id='product_purity'>";                            echo "<option value=''>Please Select Metal Purity</option>";                            foreach($myterms as $term){                                 $selected ='';                                $term_slug=$term->slug;                                $term_name =$term->name;                                if($product_purity == $term_slug){                                     $selected ='selected';                                }                                echo "<option value='".$term_slug."' $selected>".$term_name."</option>";                            }                        echo "</select>"; ?>                             <!--<input type="text" class="form-control" name="product_purity" id="product_purity" value="" />-->                        </div>                        <div class="clearfix"></div>                    </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_round_dim_pcs" class='label_input'>ROUND DIAMOND PIECES :</label>                            <div class='label_input'><input type="text" class="form-control" name="product_round_dim_pcs" id="product_round_dim_pcs" value="<?php echo $product_round_dim_pcs;?>" /></div>                            <div class="clearfix"></div>                        </div>                         <div class="form-group col-sm-6 col-xs-12">                            <label for="product_round_dim_wt" class='label_input'>ROUND DIAMOND WEIGHT(CARAT):</label>                            <div class='label_input'><input type="text" class="form-control" name="product_round_dim_wt" id="product_round_dim_wt" value="<?php echo $product_round_dim_wt;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_other_diam_nm" class='label_input'>OTHER DIAMOND NAME:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_other_diam_nm" id="product_other_diam_nm" value="<?php echo $other_diamond_name;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_other_diam_pcs" class='label_input'>OTHER DIAMOND PIECES:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_other_diam_pcs" id="product_other_diam_pcs" value="<?php echo $product_other_diam_pcs;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_other_diam_pcs_wt" class='label_input'>OTHER DIAMOND PIECES WEIGHT(CARAT):</label>                            <div class='label_input'><input type="text" class="form-control" name="product_other_diam_pcs_wt" id="product_other_diam_pcs_wt" value="<?php echo $product_other_diam_pcs_wt;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_diam_color" class='label_input'>DIAMOND COLOR:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_diam_color" id="product_diam_color" value="<?php echo $product_diam_color;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_diam_clarity" class='label_input'>DIAMOND CLARITY:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_diam_clarity" id="product_diam_clarity" value="<?php echo $product_diam_clarity;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_gemst_nm" class='label_input'>GEMSTONE NAME:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_gemst_nm" id="product_gemst_nm" value="<?php echo $product_gemst_nm;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_gemst_pcs" class='label_input'>GEMSTONE PIECES:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_gemst_pcs" id="product_gemst_pcs" value="<?php echo $product_gemst_pcs;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_gemst_wt" class='label_input'>GEMSTONE WEIGHT(CARAT):</label>                            <div class='label_input'><input type="text" class="form-control" name="product_gemst_wt" id="product_gemst_wt" value="<?php echo $product_gemst_wt;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_totalwt" class='label_input'>PRODUCT GROSS WEIGHT(GRAMS) :<span class="required"> * </span>:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_totalwt" id="product_totalwt" value="<?php echo $product_totalwt;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_metalwt" class='label_input'>NET WEIGHT METAL(GRAMS):<span class="required"> * </span>:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_metalwt" id="product_metalwt" value="<?php echo $product_metalwt;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                           <label for="product_stoneprice" class='label_input'>DIAMOND & STONE VALUE:</label>                           <div class='label_input'><input type="text" class="form-control" name="product_stoneprice" id="product_stoneprice" value="<?php echo $product_stoneprice;?>" /></div>                           <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_dimension" class='label_input'>DIMENSION L/W(CENTIMETER) :<span class="required"> * </span>:</label>                            <div class='label_input'><input type="text" class="form-control" name="product_dimension" id="product_dimension" value="<?php echo $product_dimension;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                           <label for="product_lb_charge" class='label_input'>LABOUR  CHARGE :</label>                           <div class='label_input'><input type="text" class="form-control" name="product_lb_charge" id="product_lb_charge" value="<?php echo $product_lb_charge;?>" /></div>                           <div class="clearfix"></div>                        </div><!--                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_lb_p_charge" class='label_input'>LABOUR PERCENTAGE CHARGE   :</label>                            <div class='label_input'><input type="text" class="form-control" name="product_lb_p_charge" id="product_lb_p_charge" value="<?php // echo $product_lb_p_charge;?>" /></div>                            <div class="clearfix"></div>                        </div>-->                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_set_nm" class='label_input'>PRODUCT SET NAME :</label>                            <div class='label_input'><input type="text" class="form-control" name="product_set_nm" id="product_set_nm" value="<?php echo $product_set_nm;?>" /></div>                            <div class="clearfix"></div>                        </div>                        <div class="form-group col-sm-6 col-xs-12">                            <label for="product_ship_day" class='label_input'>SHIPS IN DAYS :</label>                            <div class='label_input'><input type="text" class="form-control" name="product_ship_day" id="product_ship_day" value="<?php echo $product_ship_day;?>" /></div>                            <div class="clearfix"></div>                        </div>            <div class="product_occassion_taxonomy">                <div class="row" >                <div class="col-sm-12" >                <?php                                                        $taxonomies = get_taxonomies(array('public' => true, '_builtin' => false));                                    // print_r($taxonomies);                                    foreach ($taxonomies as $taxonomy) {                                            if($taxonomy != 'diamonds' && $taxonomy != 'carats' && $taxonomy != 'colour' && $taxonomy != 'cut' && $taxonomy != 'clarity' && $taxonomy != 'metal' && $taxonomy != 'metal_purity' && $taxonomy != 'sets' && $taxonomy != 'collections' && $taxonomy != 'specials' && $taxonomy != 'vendor_diamond' && $taxonomy != 'product_tag' && $taxonomy != 'featured_item_category'){                                            $term_list = wp_get_post_terms($productid, $taxonomy, array("fields" => "all"));                                            foreach($term_list as $term_single) {//                                            $selected_terms[] = '';                                               $selected_terms[] = $term_single->term_id; //do something here                                            }                                                                                    $terms = get_terms($taxonomy, 'orderby=count&hide_empty=0');                                        if (!empty($terms) && !is_wp_error($terms)) {                                            ?>                                            <div class="col-sm-3 col-xs-12" id="product_<?php echo $taxonomy; ?>">                                                <label for="product_categories" class='label_input'>Product <?php echo $taxonomy ?> : </label>                                                <?php foreach ($terms as $term) {//                                                    print_r($selected_terms);//                                                    echo $term->term_id;                                                    $checked = '';                                                    if(in_array($term->term_id, $selected_terms)) { $checked = 'checked=checked'; } ?>                                                   <label><input type="checkbox" name="select_taxonomy_for_<?php echo $taxonomy; ?>[]" value="<?php echo $term->term_id; ?>"  <?php echo $checked; ?>><?php echo $term->name; ?></label><br>                                            <?php } ?> </div>                                    <?php } }                } ?>                                </div>                                <div class="clearfix"></div>                                </div>                                </div>            <!--            <div class="form-group product_publish_row col-sm-6 col-xs-12">                <?php                 //$checked = '';                //if($product_status=='publish') { $checked = 'checked=checked'; }                 ?>                <div class='label_input'><input type='checkbox' name='product_publish' id='product_publish' value='yes' <?php // echo $checked; ?> /><label for="product_publish" class='label_input'>Send product for review</label></div>                <div class="clearfix"></div>            </div>-->        <!--            <div class="form-group product_categories_wrap">                <label for="product_categories" class='label_input'>Product Categories :</label>                <div class="row">                                                        <div class="col-sm-6" id="product_main_category">                    <div class="custom_select">                    <?php//                        $product_cat_terms = wp_get_post_terms($productid, 'product_cat');//                        $product_categories_array = get_post_meta($productid, 'product_categories_array', true);//                        //print_r($product_categories_array);//                        if(!empty($product_categories_array) || $product_categories_array!='') {//                            $product_cat = $product_categories_array[0];//                            echo $this->get_product_categories($product_cat);//                        }                    ?>                    </div>                    <div id="sub_categories">                        <?php //                        $sub_cat_select = '';//                        foreach($product_categories_array as $index => $sub_cat) {//                            if($index!=0) {//                                $parent_cat_slug = $product_categories_array[$index-1];//                                $level = $index;//                                $parent_cat_object = get_term_by('slug', $parent_cat_slug, 'product_cat');//                                $sub_cat_select .= '<div class="custom_select" style="margin-top:20px;">';//                                $sub_cat_select .= '<select data-placeholder="Select sub category" class="product_sub_categories custom_select_box" name="product_sub_categories[]" data-top-category="false" id="sub_cat_level_'.$level.'" data-level="'.$level.'" disabled="disabled">';//                                $sub_cat_select .= '<option value=""></option>';//                                $terms = get_terms('product_cat', array('hide_empty' => 0, 'parent'=>$parent_cat_object->term_id));//                                if(!empty($terms)) {//                                    foreach($terms as $term) {//                                        $selected = '';//                                        if($sub_cat==$term->slug) {//                                            $selected = 'selected=selected';//                                        }    //                                        $sub_cat_select .= '<option value="'.$term->slug.'" '.$selected.'>'.$term->name.'</option>';//                                    }//                                }//                                $sub_cat_select .= '</select>';//                                $sub_cat_select .= '</div>';//                            }//                        } //                        echo $sub_cat_select;                        ?>                    </div>                                            </div>-->                    <div class="col-sm-6 sortables_product_sub_categories" id="categories_relationships">                        <?php                         $attributes_order = get_post_meta($productid, 'product_attribute_order', true);                        // print_r($attributes_order);                        $parent_cat_slug = $product_categories_array[1];                        $parent_cat_object = get_term_by('slug', $parent_cat_slug, 'product_cat');                        $attributes_array = $wpdb->get_results("SELECT attribute_id FROM {$wpdb->prefix}woocommerce_attribute_taxonomies_data where attribute_assigned_to = $parent_cat_object->term_id");                                                if(!empty($attributes_array)) {                            echo $this->get_categories_relationship($attributes_order, $parent_cat_slug, $productid);                           }                        ?>                                            </div>                    <?php                    if(!empty($attributes_order)) {                        $show_refresh_product_attributes = 'display: block;';                    } else {                        $show_refresh_product_attributes = 'display: none;';                    }                    ?>                    <div class="btn btn-default refresh_product_attributes" data-product-id="<?php echo $productid; ?>" data-label="Refresh Product Attributes" style="font-size: 11px; float: right; <?php echo $show_refresh_product_attributes; ?>">Refresh Product Attributes</div>                    <div class="clearfix"></div>            <?php             $sizechartflag = false;            if(!empty($attributes_array)) {                foreach($attributes_array as $attribute) {                    $attribute_obj = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}woocommerce_attribute_taxonomies where attribute_id = $attribute->attribute_id");                    if($attribute_obj[0]->attribute_name == 'size' || $attribute_obj[0]->attribute_name == 'shoes-sizes') {                        $sizechartflag = true;                    }                }            }            if($sizechartflag == true) {            ?>                <div class="form-group size_chart_option">                <label for="size_chart" class='label_input' style="background: none repeat scroll 0 0 slategrey; color: #fff; font-size: 15px; font-weight: 500; padding: 7px 15px;">Size Guide Chart :</label>                <div class="row">                    <div class="col-sm-12">                                                <label for="size_chart" class='label_input'>Size Chart Table :</label>                        <div class='label_input'><textarea class="form-control" name="clothing_size_chart" id="clothing_size_chart"><?php echo $clothing_size_chart; ?></textarea></div>                                                <div class="row">                            <div class="col-sm-7">                            <label for="size_chart" class='label_input'>Mesurement Guide Option :</label>                            <div class='label_input'><textarea class="form-control" name="measurement_guides" id="measurement_guides"><?php echo $measurement_guides; ?></textarea></div>                            </div>                            <div id="upload_size_chart_image_wrap" class="col-sm-5" style="border: 1px solid #ddd; text-align: center; padding-top: 15px; padding-bottom: 15px; margin-top: 30px; cursor: pointer;">                                <?php                                 $si_uploadarea = "";                                if($size_chart_image!='') {                                    $size_chart_image_obj = wp_get_attachment_image_src($size_chart_image, 'thumbnail', true);                                    $size_chart_image_url = $size_chart_image_obj[0];                                       $si_uploadarea = "display: none;";                                }                                    ?>                                    <div id="sizechart_upload_images_area" style="<?php echo $si_uploadarea; ?>">                                    Upload Here Your Clothing Size Chart Image                                </div>                                <div id="sizechartimagepreview">                                    <?php                                    $scimage = '';                                    if($size_chart_image!='') {                                        $scimage .= '<div class="sizechartimagepreview">';                                        $scimage .= sprintf('<img src="%s" name="" class="img-responsive" />', $size_chart_image_url);                                        $scimage .= sprintf('<a href="javascript:void(0);" title="Delete Image" class="delete_size_chart_image fa-times-circle-o fa" data-upload_id="%d" style="color: tomato; font-size: 25px;">%s</a>', $size_chart_image, __(''));                                        $scimage .= sprintf('<input type="hidden" name="size_chart_image" value="%d" />', $size_chart_image);                                        $scimage .= '</div>';                                    }                                     echo $scimage;                                       ?>                                    </div>                                </div>                             <div class="clearfix"></div>                           </div>                        <div class="clearfix"></div>                    </div>                    </div>            </div>            <?php } else { ?>                        <div class="form-group size_chart_option" style="display: none;">                            <label for="size_chart" class='label_input' style="background: none repeat scroll 0 0 slategrey; color: #fff; font-size: 15px; font-weight: 500; padding: 7px 15px;">Size Guide Chart :</label>                            <div class="row">                                <div class="col-sm-12">                                                                        <label for="size_chart" class='label_input'>Insert Size Chart Table :</label>                                    <div class='label_input'><textarea class="form-control" name="clothing_size_chart" id="clothing_size_chart"></textarea></div>                                                                                                    <div class="row">                                        <div class="col-sm-7">                                            <label for="size_chart" class='label_input'>Insert Mesurement Guide Option :</label>                                            <div class='label_input'><textarea class="form-control" name="measurement_guides" id="measurement_guides"></textarea></div>                                        </div>                                        <div id="upload_size_chart_image_wrap" class="col-sm-5" style="border: 1px solid #ddd; text-align: center; padding-top: 15px; padding-bottom: 15px; margin-top: 30px; cursor: pointer;">                                            <div id="sizechart_upload_images_area">                                                Upload Here Your Clothing Size Chart Image                                            </div>                                            <div id="sizechartimagepreview">                                            </div>                                            </div>                                         <div class="clearfix"></div>                                       </div>                                    <div class="clearfix"></div>                                </div>                                </div>                        </div>            <?php } ?>            <div style='border-top: 1px solid #ddd; padding:15px 0px; '></div>                                    <div class="form-group" style="text-align: center; position: relative;">                    <input type="hidden" name="product_id" value="<?php echo $productid; ?>" />                    <input type="hidden" name="form_action" value="edit_product" />                    <input type="submit" class="button product_upload" value="Update Product" />                    <i class="fa fa-cog fa-spin update_product_loader"></i>            </div>        </form>        <?php        $response = ob_get_clean();        echo json_encode($response);        die(0);    }    public function refresh_product_attributes() {        $productid = $_GET['product_id'];        $attributes_order = get_post_meta($productid, 'product_attribute_order', true);        $product_categories_array = get_post_meta($productid, 'product_categories_array', true);        if(!empty($attributes_order)) {            $cat_attributes_ids_array = $attributes_order;        } else {            $cat_attributes_ids_array = array();        }        $cat_attributes_ids_array_new = array();        // print_r(count($cat_attributes_ids_array));        $attributes_array = array();        if(!empty($product_categories_array)) {            foreach($product_categories_array as $category_slug) {                $category_object = get_term_by('slug', $category_slug, 'product_cat');                $category = $category_object->term_id;                $attributes_array = $this->get_categories_assigned_attributes($category, 1);                            if(!empty($attributes_array)) {                    foreach( $attributes_array as $object ) {                        if(!in_array($object->attribute_id, $cat_attributes_ids_array)) {                            if(!in_array($object->attribute_id, $cat_attributes_ids_array_new)) {                                $cat_attributes_ids_array_new[] = $object->attribute_id;                            }                        }                    }                        }            }                    }        $category_attributes = '';        if(!empty($cat_attributes_ids_array_new)) {            $category_attributes .= $this->get_categories_relationship($cat_attributes_ids_array_new, $attribute_category);        }               echo json_encode( array('new_category_attributes'=>$category_attributes) );        die(0);    }    //Get Product Main Categories    public function get_product_categories($selected_cat='') {        $categories = get_terms( 'product_cat', array(        'hide_empty' => 0,        'parent' => 0        ) );        $output = '';        $output .= '<select data-placeholder="Select category" class="product_categories custom_select_box" name="product_category" data-top-category="true" data-level="0">';        $output .= '<option value=""></option>';                foreach($categories as $category) {            $selected = '';            if($selected_cat==$category->slug) {                $selected = 'selected=selected';            }                $output .= '<option value="'.$category->slug.'" '.$selected.'>'.$category->name.'</option>';        }        $output .= '</select>';            return $output;    }    //Get Sub Categories Handler     public function get_sub_categories_handler() {        global $wpdb;        $category = $_GET['category'];        $category_object = get_term_by('slug', $category, 'product_cat');        $category = $category_object->term_id;        $terms = get_terms('product_cat', array('hide_empty' => 0, 'parent'=>$category));        $sub_category_flag = 'true';        $level = $_GET['level'] + 1;        $category_attributes = '';               if(isset($_GET['cat_attributes_ids'])) {            $cat_attributes_ids_array = explode(",", $_GET['cat_attributes_ids']);        } else {            $cat_attributes_ids_array = array();        }                if(!empty($terms)) {            $output = '';            $output .= '<div class="custom_select" style="margin-top:20px;">';            $output .= '<select data-placeholder="Select sub category" class="product_sub_categories custom_select_box" name="product_sub_categories[]" data-top-category="false" id="sub_cat_level_'.$level.'" data-level="'.$level.'">';            $output .= '<option value=""></option>';                        foreach($terms as $term) {                $selected = '';                $output .= '<option value="'.$term->slug.'" '.$selected.'>'.$term->name.'</option>';            }            $output .= '</select>';            $output .= '</div>';            $attributes_array = $this->get_categories_assigned_attributes($category, 1);                        if(!empty($attributes_array)) {                foreach( $attributes_array as $object ) {                    if(!in_array($object->attribute_id, $cat_attributes_ids_array)) {                        $cat_attributes_ids_array[] = $object->attribute_id;                    }                }                //$category_attributes .= $this->get_categories_relationship($attributes_array, $attribute_category);            }            $cat_attributes_ids_array = array_filter($cat_attributes_ids_array, create_function('$a','return trim($a)!=="";'));            $sub_category_flag = 'true';            $sizechartoption = 'false';        } else {            $attribute_category = $_GET['filter_category'];                                    // if( $level == 3 ) {            //     $attributes_array = $this->get_categories_assigned_attributes($category, 1);            //     if(!empty($attributes_array)) {            //         $category_attributes .= $this->get_categories_relationship($attributes_array, $attribute_category);            //     }            // } else {                           // print_r($cat_attributes_ids_array);                    $attributes_array = $this->get_categories_assigned_attributes($category, 1);                 if(!empty($attributes_array)) {                    foreach( $attributes_array as $object ) {                        if(!in_array($object->attribute_id, $cat_attributes_ids_array)) {                            $cat_attributes_ids_array[] = $object->attribute_id;                        }                    }                                }                                                    $cat_attributes_ids_array = array_filter($cat_attributes_ids_array, create_function('$a','return trim($a)!=="";'));                // print_r(count($cat_attributes_ids_array));                if(!empty($cat_attributes_ids_array)) {                    $category_attributes .= $this->get_categories_relationship($cat_attributes_ids_array, $attribute_category);                }                   $sizechartoption = 'false';                                if(!empty($cat_attributes_ids_array)) {                    foreach($cat_attributes_ids_array as $attribute_id) {                        $attribute_obj = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}woocommerce_attribute_taxonomies where attribute_id = $attribute_id");                                                if($attribute_obj[0]->attribute_name == 'size' || $attribute_obj[0]->attribute_name == 'shoes-sizes') {                            $sizechartoption = 'true';                        }                    }                }            // }            $sub_category_flag = 'false';        }                echo json_encode(array('output'=>$output, 'category_attributes'=>$category_attributes, 'sub_category_flag'=>$sub_category_flag, 'cat_attributes_ids'=>trim(implode(",", $cat_attributes_ids_array)), 'sizechartoption'=>$sizechartoption));        die(0);    }    //Get Attributes    public function get_categories_assigned_attributes($categoryid, $level) {        global $wpdb;        $attributes = array();        if($level<=4) {            $attributes = $wpdb->get_results("SELECT attribute_id FROM {$wpdb->prefix}woocommerce_attribute_taxonomies_data where attribute_assigned_to = $categoryid");            if(empty($attributes)) {                $category_object = get_term_by('term_id', $categoryid, 'product_cat');                $attributes = $this->get_categories_assigned_attributes($category_object->parent, $level+1);            }         }        return $attributes;    }    //Get Product Attribute Relationship    public function get_categories_relationship($attributes_array=array(), $attribute_category, $productid='') {        global $wpdb;        // print_r($attributes_array);        $attributes = "";        if(!empty($attributes_array)) {            foreach($attributes_array as $attribute_data) {                if (!is_object($attribute_data)) {                    $attribute_id = $attribute_data;                } else {                    $attribute_id = $attribute_data->attribute_id;                }                $attributes_data_object = $wpdb->get_row("SELECT * FROM {$wpdb->prefix}woocommerce_attribute_taxonomies_data where attribute_id = $attribute_id");                $attribute_label = $attributes_data_object->attribute_label;                $attribute_placeholder = $attributes_data_object->attribute_placeholder;                $attribute_add_new_support = $attributes_data_object->attribute_add_new_support;                $woo_attributes = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}woocommerce_attribute_taxonomies where attribute_id = $attribute_id");                $woo_attributes = $woo_attributes[0];                $attribute_type = $woo_attributes->attribute_type;                $attribute_name = $woo_attributes->attribute_name;                $tax_attribute_name = "pa_".$attribute_name;                if($attribute_type == 'text') {                    $saved_term = '';                    if($productid!='') {                        $product_cat_terms = wp_get_post_terms($productid, $tax_attribute_name);                        $saved_term = $product_cat_terms[0]->name;                    }                    $attributes .= '<div class="form-group" style="position: relative;">';                    $attributes .= '<input type="text" class="form-control" name="product_attribute['.$tax_attribute_name.']" id="'.$tax_attribute_name.'" taxonomy="'.$tax_attribute_name.'" value="'.$saved_term.'" autocomplete="off" placeholder="'.$attribute_placeholder.'" />';                    $attributes .= '<input type="hidden" name="product_attribute_order[]" value= "'.$attribute_id.'" />';                    $attributes .= '<div class="sorthandles"><span class="fa fa-sort-up sorthandle" title="Sort Up" data-sort="up"></span> <span class="fa fa-sort-down sorthandle" data-sort="down" title="Sort Down"></span></div>';                    $attributes .= '</div>';                }                if($attribute_type == 'select') {                    if($attribute_add_new_support=="yes") {                        $custom_select_style = "width: 90%; display: inline-block;";                    }                      $saved_term = '';                    if($productid!='') {                        $product_cat_terms = wp_get_post_terms($productid, $tax_attribute_name);                        $saved_term = $product_cat_terms[0]->slug;                    }                      $attributes .= '<div class="form-group" style="position: relative;">';                    $attributes .= '<div class="custom_select" style="'.$custom_select_style.'">';                    $attributes .= '<select data-placeholder="Select '.$attribute_label.'" id="'.$tax_attribute_name.'" name="product_attribute['.$tax_attribute_name.']" class="selectsingleterm">';                    $attributes .= '<option value=""></option>';                    $terms = $this->get_attributes_terms($tax_attribute_name, $attribute_category);                    foreach($terms as $term) {                        $select_selected = "";                        if($term[0]==$saved_term) {                            $select_selected = "selected=selected";                        }                            $attributes .= '<option value="'.$term[0].'" '.$select_selected.'>'.$term[1].'</option>';                    }                    $attributes .= '</select>';                    $attributes .= '<input type="hidden" name="product_attribute_order[]" value= "'.$attribute_id.'" />';                    $attributes .= '</div>';                    if($attribute_add_new_support=="yes") {                        $attributes .= '<button type="button" class="add_new_term sub_attribute_new_term btn btn-default" title="Add New '.$attribute_label.'" data-taxonomy="'.$tax_attribute_name.'" data-taxonomy-label="'.$attribute_label.'" data-select-type="single" style="padding:2px 8px; margin-left:5px;"><span class="fa">+</span></button>';                         }                    $attributes .= '<div class="sorthandles"><span class="fa fa-sort-up sorthandle" title="Sort Up" data-sort="up"></span> <span class="fa fa-sort-down sorthandle" data-sort="down" title="Sort Down"></span></div>';                    $attributes .= '</div>';                }                   if($attribute_type == 'multiselect') {                    $multi_selected_terms = array();                    if($productid!='') {                        $product_cat_terms = wp_get_post_terms($productid, $tax_attribute_name);                        if(!empty($product_cat_terms)) {                            foreach($product_cat_terms as $saved_term) {                                $multi_selected_terms[] = $saved_term->slug;                            }                        }                    }                                        $attributes .= '<div class="form-group" style="position: relative;">';                    $attributes .= '<div class="" style="padding:0px; margin-bottom: 15px;">';                    $attributes .= '<select data-placeholder="'.$attribute_placeholder.'" id="'.$tax_attribute_name.'" name="product_attribute['.$tax_attribute_name.'][]" class="multiselectterms" multiple >';                    $attributes .= '<option value=""></option>';                    $terms = $this->get_attributes_terms($tax_attribute_name, $attribute_category);                    foreach($terms as $term) {                        $multi_select_selected = "";                        if(in_array($term[0], $multi_selected_terms)) {                            $multi_select_selected = "selected=selected";                        }                        $attributes .= '<option value="'.$term[0].'" '.$multi_select_selected.'>'.$term[1].'</option>';                    }                    $attributes .= '</select>';                    $attributes .= '<input type="hidden" name="product_attribute_order[]" value= "'.$attribute_id.'" />';                    if($attribute_add_new_support=="yes") {                        $attributes .= '<button type="button" class="add_new_term sub_attribute_new_term btn btn-default" title="Add New '.$attribute_label.'" data-taxonomy="'.$tax_attribute_name.'" data-taxonomy-label="'.$attribute_label.'" data-select-type="multiple"><span class="fa">+</span></button>';                         }                    $attributes .= '</div>';                    $attributes .= '<div class="sorthandles"><span class="fa fa-sort-up sorthandle" title="Sort Up" data-sort="up"></span> <span class="fa fa-sort-down sorthandle" data-sort="down" title="Sort Down"></span></div>';                    $attributes .= '</div>';                }                                }        }               return $attributes;        die(0);    }    //Get Attribute Terms    public function get_attributes_terms($taxonomy, $attribute_category='') {        global $wpdb;        $terms_array = array();        if($attribute_category=="") {            $terms = get_terms( $taxonomy, array(                'hide_empty' => 0,                'parent' => 0            ) );            if(!empty($terms)) {                foreach($terms as $term) {                    if(!in_array($term->slug, $terms_array)) {                        $terms_array[] = array($term->slug, $term->name, $term->term_id);                    }                }            }        } else {            $parent_cat = get_term_by('slug', $attribute_category, 'product_cat');            $parent_cat_id = $parent_cat->term_id;            $terms = $wpdb->get_results("SELECT term_id FROM {$wpdb->prefix}woocommerce_attribute_terms_data where parent_term_id = $parent_cat_id");            if(!empty($terms)) {                foreach($terms as $term) {                    $termobject = get_term_by('id', $term->term_id, $taxonomy);                    if(!in_array($termobject->slug, $terms_array)) {                        $terms_array[] = array($termobject->slug, $termobject->name, $termobject->term_id);                    }                }            }            }                        return $terms_array;        die(0);    }    //Get Product Discount Terms    public function get_product_discount_terms() {        $categories = get_terms( 'product-discount', array(        'hide_empty' => 0        ) );        $output = '';        $output .= '<select data-placeholder="Select Discount" class="product_discount_term custom_select_box" name="product_discount_term">';        $output .= '<option value=""></option>';        foreach($categories as $category) {            $output .= '<option value="'.$category->slug.'">'.$category->name.'</option>';        }        $output .= '</select>';            return $output;    }    //Upload New Product AJAX Handler    public function upload_edit_product_ajax() {        global $wpdb;        $form_values = $_POST['form_values'];        parse_str($form_values, $form);               if(!empty($form)) {        $form_action = $form['form_action'];            $success = "";        $error = "";        $state = "success";        $error_flag = false;            $sku = wc_clean( stripslashes( $form['product_style_no'] ) );        $product_title = wc_clean( stripslashes( $form['product_title'] ) );         $product_description = wc_clean( stripslashes( $form['product_description'] ) );         $product_metal = wc_clean( stripslashes( $form['product_metal'] ) );        $product_purity = wc_clean( stripslashes( $form['product_purity'] ) );        $product_round_dim_pcs = wc_clean( stripslashes( $form['product_round_dim_pcs'] ) );        $product_round_dim_wt = wc_clean( stripslashes( $form['product_round_dim_wt'] ) );        $product_round_dim_wt = number_format((float)$product_round_dim_wt, 2, '.', '');        $product_other_diam_nm = wc_clean( stripslashes( $form['product_other_diam_nm'] ) );        $product_other_diam_pcs = wc_clean( stripslashes( $form['product_other_diam_pcs'] ) );        $product_other_diam_pcs_wt = wc_clean( stripslashes( $form['product_other_diam_pcs_wt'] ) );        $product_other_diam_pcs_wt = number_format((float)$product_other_diam_pcs_wt, 2, '.', '');        $product_diam_color = wc_clean( stripslashes( $form['product_diam_color'] ) );        $product_diam_clarity = wc_clean( stripslashes( $form['product_diam_clarity'] ) );        $product_gemst_nm = wc_clean( stripslashes( $form['product_gemst_nm'] ) );        $product_gemst_pcs = wc_clean( stripslashes( $form['product_gemst_pcs'] ) );        $product_gemst_wt = wc_clean( stripslashes( $form['product_gemst_wt'] ) );        $product_totalwt = wc_clean( stripslashes( $form['product_totalwt'] ) );        $product_totalwt = number_format((float)$product_totalwt, 2, '.', '');        $product_metalwt = wc_clean( stripslashes( $form['product_metalwt'] ) );        $product_metalwt = number_format((float)$product_metalwt, 2, '.', '');        $product_stoneprice = wc_clean( stripslashes( $form['product_stoneprice'] ) );        $product_dimension = wc_clean( stripslashes( $form['product_dimension'] ) );        $product_lb_charge = wc_clean( stripslashes( $form['product_lb_charge'] ) );        $product_lb_p_charge = wc_clean( stripslashes( $form['product_lb_p_charge'] ) );        $product_set_nm = wc_clean( stripslashes( $form['product_set_nm'] ) );        $product_ship_day = wc_clean( stripslashes( $form['product_ship_day'] ) );        if($sku=="") {            $error .= "<li>Please Enter Product SKU/ID</li>";            $error_flag = true;             $state = "error";        }        if($product_title=="") {            $error .= "<li>Please Enter Product Title</li>";            $error_flag = true;             $state = "error";        }        if($product_metal=="") {            $error .= "<li>Please Select Product Metal</li>";            $error_flag = true;             $state = "error";        }        if($product_purity=="") {            $error .= "<li>Please Select Product Purity</li>";            $error_flag = true;             $state = "error";        }        if($product_totalwt=="") {            $error .= "<li>Please Enter Product Gross weight</li>";            $error_flag = true;             $state = "error";        }        if($product_metalwt=="") {            $error .= "<li>Please Enter Metal Weight</li>";            $error_flag = true;             $state = "error";        }        if($product_dimension=="") {            $error .= "<li>Please Enter Product Dimension</li>";            $error_flag = true;             $state = "error";        }        $merchant_user = wp_get_current_user();        $merchant_user_id = $merchant_user->ID;                         if(!empty($product_lb_charge)){                    $labour_charge = $product_lb_charge;                }else{                    $global_custom_setting = unserialize(get_option('global_custom_setting'));                    $gold_price = $global_custom_setting['gold_price'];                    $labour_percentage_charge = $product_lb_p_charge/100;                     $labour_charge = $gold_price*$labour_percentage_charge*$product_metalwt;                }        if($form_action=="upload_product") {            if($sku!="") {                if ( $wpdb->get_var( $wpdb->prepare("                    SELECT $wpdb->posts.ID                    FROM $wpdb->posts                    LEFT JOIN $wpdb->postmeta ON ($wpdb->posts.ID = $wpdb->postmeta.post_id)                    WHERE $wpdb->posts.post_type = 'product'                    AND $wpdb->posts.post_author = $merchant_user_id                    AND $wpdb->postmeta.meta_key = 'style_no' AND $wpdb->postmeta.meta_value = '%s'                    ", $sku ) ) )                 {                    $error .= "<li>This Product SKU/ID Alerady Exist</li>";                    $error_flag = true;                     $state = "error";                }                }        }        if($error_flag==false) {//                $current_user = wp_get_current_user();////                ////                $city = get_user_meta($current_user->ID, 'user_city', true);  ////                $mall_id = get_user_meta($current_user->ID, 'user_mall', true);    ////                $shop_id = get_user_meta($current_user->ID, 'user_shop', true);    //                $product_desc = $form['product_description'];////                $product_short_desc = wc_clean( stripslashes( $form['product_short_description'] ) ); //                $product_status = 'draft';//                echo $form['product_publish']; exit;                            if(isset($form['product_publish']) ) {                   $product_status = 'draft';                }                 if($form_action=="upload_product") {                    $product_post = array(//                        'post_title' => wp_strip_all_tags($product_title),                        'post_excerpt' => $product_description,                        'post_status' => $product_status,                        'post_author' => $merchant_user_id,                        'post_type' => 'product',                    );                    $product_id = wp_insert_post( $product_post );                } else {                    $product_id = $form['product_id'];                    $product_post = array(                        'ID'           => $product_id,//                        'post_title' => wp_strip_all_tags($product_title),                        'post_excerpt' => $product_description,                        'post_status' => $product_status,                        'post_type' => 'product',                    );                    wp_update_post( $product_post );                }                if(!is_wp_error($product_id)) {                    //Update Product SKU/ID                        if($product_other_diam_nm !=""){                            $other_diam_name = explode(',', $product_other_diam_nm);                           // wp_set_post_terms( $product_id, $product_descmasters,'jewellary');                            $input_terms = array_map( 'sanitize_text_field', $other_diam_name );                            $terms = array();                            foreach( $input_terms as $term ) {                                $existent_term = term_exists( $term, 'vendor_diamond' );                                if( $existent_term && isset($existent_term['term_id']) ) {                                    $term_id = $existent_term['term_id'];                                } else {                                    //intert the term if it doesn't exsit                                    $term = wp_insert_term(                                        $term, // the term                                         'vendor_diamond' // the taxonomy                                    );                                    if( !is_wp_error($term ) && isset($term['term_id']) ) {                                         $term_id = $term['term_id'];                                    }                                }                               //Fill the array of terms for later use on wp_set_object_terms                               $terms[] = (int) $term_id;                            }                        wp_set_object_terms( $product_id, $terms, 'vendor_diamond' );                        }                        update_post_meta($product_id, 'style_no', $sku);                        update_post_meta($product_id, 'product_title', $product_title);                        update_post_meta($product_id, 'metal_color', $product_metal);                        update_post_meta($product_id, 'metal_purity', $product_purity);                        update_post_meta($product_id, 'round_diamond_pcs', $product_round_dim_pcs);                        update_post_meta($product_id, 'round_diamond_weight(carat)', $product_round_dim_wt);                        update_post_meta($product_id, 'other_diamond_pieces', $product_other_diam_pcs);                        update_post_meta($product_id, 'other_diamond_pieces_weight(carat)', $product_other_diam_pcs_wt);                        update_post_meta($product_id, 'diamond_color', $product_diam_color);                        update_post_meta($product_id, 'diamond_clarity', $product_diam_clarity);                        update_post_meta($product_id, 'gemstone_name', $product_gemst_nm);                        update_post_meta($product_id, 'gemstone_pieces', $product_gemst_pcs);                        update_post_meta($product_id, 'gemstone_weight(carat)', $product_gemst_wt);                        update_post_meta($product_id, 'total_wt._(gms)', $product_totalwt);                        update_post_meta($product_id, 'metal_wt._(gms)', $product_metalwt);                        update_post_meta($product_id, 'diamond_&_stone_value', $product_stoneprice);                        update_post_meta($product_id, 'dimensions', $product_dimension);                                                update_post_meta($product_id, 'labour_charge', $labour_charge);                        		        update_post_meta($product_id, 'set_name', $product_set_nm);                        update_post_meta($product_id, 'ships_in_days', $product_ship_day);                                     $taxonomies = get_taxonomies(array ('public'   => true,'_builtin' => false));                    foreach ( $taxonomies as $taxonomy ) {                    $product_taxonomies = wc_clean($form['select_taxonomy_for_'.$taxonomy]);                    if(!empty($product_taxonomies)){                    wp_set_post_terms($product_id, $product_taxonomies,$taxonomy,true );                    }                    }                    //Set Product City Mall and Shop                    update_post_meta($product_id, 'city', $city);                    update_post_meta($product_id, 'mall', $mall_id);                    update_post_meta($product_id, 'shop', $shop_id);                                        //Update Product Additional Information                    $product_additional_info = $form['product_additional_info'];                    update_post_meta($product_id, 'product_additional_info', $product_additional_info);                    //Set Parent Product Type Grouped                    wp_set_post_terms($product_id, 'simple', 'product_type');                                        //Set Product Visibility Hidden Until Super ADMIN Approval                    //update_post_meta($product_id, '_visibility', 'hidden');                                        //Set Product Regular Price                    $product_price = $form['product_price'];                    update_post_meta($product_id, '_regular_price', $product_price);                    update_post_meta($product_id, '_price', $product_price);                                        //Set Product Sale/Discount Price if Discount Exist                    $product_discount = trim($form['product_discount']);                    $product_discount_term = $form['product_discount_term'];                    if($product_discount!="") {                        $discount = preg_replace("/[^0-9]/", "", $product_discount);                        $discount = intval($discount);                        $discount_price = $product_price * $discount / 100;                        $product_sale_price = $product_price - $discount_price;                        update_post_meta($product_id, '_product_discount', $product_discount);                        update_post_meta($product_id, '_product_discount_number', $discount);                        //Get Product Discount Term                                        $product_discount_term = $this->get_discount_range_term($discount);                        wp_set_object_terms( $product_id, $product_discount_term, 'product-discount', false );                        update_post_meta($product_id, '_sale_price', $product_sale_price);                        update_post_meta($product_id, '_price', $product_sale_price);                        update_post_meta($product_id, '_product_deal_discount', $discount);                        update_post_meta($product_id, '_product_dd_ndd_order', $discount);                    } else {                        delete_post_meta($product_id, '_product_discount');                        delete_post_meta($product_id, '_product_discount_number');                        delete_post_meta($product_id, '_sale_price');                    }                    //Set Product Deal if Exist                    $product_deal = trim($form['product_deal']);                    update_post_meta($product_id, 'product_deal', $product_deal);                    if($product_deal!="") {                        update_post_meta($product_id, 'product_deal_flag', 'true');                        update_post_meta($product_id, '_product_deal_discount', 100);                        update_post_meta($product_id, '_product_dd_ndd_order', 100);                    } else {                        delete_post_meta($product_id, 'product_deal_flag');                    }                    //Set Meta Flag Product If No Deal and Discount                     if($product_discount == '' && $product_deal == '') {                        update_post_meta($product_id, 'no_deal_discount', 'true');                        update_post_meta($product_id, '_product_dd_ndd_order', 0);                        delete_post_meta($product_id, '_product_deal_discount');                    } else {                        delete_post_meta($product_id, 'no_deal_discount');                    }                    $product_images = $form['product_images'];                    if (!empty($product_images) || $product_images != "") {                        $featured_image = $product_images[0];                        update_post_meta($product_id, '_thumbnail_id', $featured_image);                        unset($product_images[0]);                        $product_gallery_images = implode(", ", $product_images);                        update_post_meta($product_id, '_product_image_gallery', $product_gallery_images);                    }                    $product_categories_array = array();                    //First Remove All Apply Product Categories                    wp_delete_object_term_relationships( $product_id, 'product_cat' );                                        //Apply Product Main Category                    $product_category = $form['product_category'];                    wp_set_object_terms( $product_id, $product_category, 'product_cat', true );                    $product_categories_array[] = $product_category;                    //Apply Sub Categories To Product                    $product_sub_categories = $form['product_sub_categories'];                    if(!empty($product_sub_categories)) {                        foreach($product_sub_categories as $sub_cat) {                            wp_set_object_terms( $product_id, $sub_cat, 'product_cat', true );                            $product_categories_array[] = $sub_cat;                        }                    }                    //Save Product Categories Sub Categories Structure                    update_post_meta($product_id, 'product_categories_array', $product_categories_array);                    //Apply Categories Attributes To Product                    $product_attributes = $form['product_attribute'];                    if(!empty($product_attributes)) {                        foreach($product_attributes as $product_attribute) {                            if(!empty($product_attributes)) {                                foreach($product_attributes as $tax => $product_attribute_val) {                                    //First Remove All Apply Attribute Terms                                    wp_delete_object_term_relationships( $product_id, $tax );                                    if(!is_array($product_attribute_val)) {                                       wp_set_object_terms( $product_id, $product_attribute_val, $tax, true );                                    } else {                                        if(!empty($product_attribute_val)) {                                            foreach($product_attribute_val as $attribute_val) {                                                wp_set_object_terms( $product_id, $attribute_val, $tax, true );                                            }                                        }                                    }                                   }                            }                        }                    }                                        //Check for Clothing Sizes Attributes is set                    $clothing_size_chart = $form['clothing_size_chart'];                    $measurement_guides = $form['measurement_guides'];                    $size_chart_image = $form['size_chart_image'];                    if(!empty($product_attributes)) {                        $clothingsizeflag = false;                        foreach($product_attributes as $key => $product_attribute) {                            if($key == 'pa_size' || $key == 'pa_shoes-sizes') {                                $clothingsizeflag = true;                                update_post_meta($product_id, 'clothing_size_chart', $clothing_size_chart);                                update_post_meta($product_id, 'measurement_guides', $measurement_guides);                                update_post_meta($product_id, 'size_chart_image', $size_chart_image);                            }                             if($clothingsizeflag == false) {                                delete_post_meta($product_id, 'clothing_size_chart');                                delete_post_meta($product_id, 'measurement_guides');                                delete_post_meta($product_id, 'size_chart_image');                            }                        }                    } else {                        delete_post_meta($product_id, 'clothing_size_chart');                        delete_post_meta($product_id, 'measurement_guides');                        delete_post_meta($product_id, 'size_chart_image');                    }                           //Update Product Attributes                    $attributes = array();                    if(is_array($product_attributes)) {                        if(!empty($product_attributes)) {                            foreach($product_attributes as $taxonomy => $product_attribute_val) {                                 if($product_attribute_val!="" || !empty($product_attribute_val)) {                                    $attributes[$taxonomy] = array('name'=>$taxonomy, 'value'=>0, 'position'=>0, 'is_visible'=>0, 'is_variation'=>0, 'is_taxonomy'=>1);                                    update_post_meta($product_id, '_product_attributes', $attributes);                                }                            }                            }                    }                    $this->update_sub_attribute_term_parents($form);                                        if(!empty($form['product_attribute_order'])) {                        update_post_meta($product_id, 'product_attribute_order', $form['product_attribute_order']);                    } else {                        update_post_meta($product_id, 'product_attribute_order', '');                    }                    delete_post_meta($product_id, 'product_search_meta');                    //Search Metas                    add_post_meta($product_id, 'product_search_meta', strtolower(get_the_title($product_id)));                    add_post_meta($product_id, 'product_search_meta', strtolower(get_the_title($shop_id)));                    add_post_meta($product_id, 'product_search_meta', strtolower(get_the_title($mall_id)));                                $product_search_terms = wp_get_post_terms( $product_id, 'product_cat' );                    if(!empty($product_search_terms)) {                        foreach($product_search_terms as $psterm) {                            $pskeyword = str_replace("-", " ", $psterm->name);                            $pskeyword = strtolower($pskeyword);                            add_post_meta($product_id, 'product_search_meta', $pskeyword);                        }                    }                    $brand_terms = wp_get_post_terms( $product_id, 'pa_brand' );                    if(!empty($brand_terms)) {                        foreach($brand_terms as $bterm) {                            $bkeyword = str_replace("-", " ", $bterm->name);                            $bkeyword = strtolower($bkeyword);                            add_post_meta($product_id, 'product_search_meta', $bkeyword);                        }                    }                    $colors_terms = wp_get_post_terms( $product_id, 'pa_color' );                    if(!empty($colors_terms)) {                        foreach($colors_terms as $cterm) {                            $ckeyword = str_replace("-", " ", $cterm->name);                            $ckeyword = strtolower($ckeyword);                            add_post_meta($product_id, 'product_search_meta', $ckeyword);                        }                    }                    $state = "success";                     if($form_action=="upload_product") {                        $success = "<li>Product Upload Successfully !!!</li>";                    } else {                        $success = "<li>Update Product Successfully !!!</li>";                    }                } else {                    $state = "error";                     if($form_action=="upload_product") {                        $error .= "<li>Error While Product Uploading Please Try Again!!!</li>";                     } else {                        $error .= "<li>Error While Updating Product Please Try Again!!!</li>";                    }                    }                 }        }        echo json_encode(array('state'=>$state, 'error'=>$error, 'success'=>$success, 'form_action'=>$form_action));        die(0);    }    //Get Discount Range    public function get_discount_range_term($num) {        $range_5 = range(1, 5);        $range_10 = range(6, 10);        $range_15 = range(11, 15);        $range_20 = range(16, 20);                $range_25 = range(21, 25);        $range_30 = range(26, 30);                $range_35 = range(31, 35);        $range_40 = range(36, 40);                $range_45 = range(41, 45);        $range_50 = range(46, 50);        $range_55 = range(51, 55);        $range_60 = range(56, 60);                $range_65 = range(61, 65);        $range_70 = range(66, 70);        $range_75 = range(71, 75);        $range_80 = range(76, 80);        $range_85 = range(81, 85);        $range_90 = range(86, 90);        $range_95 = range(91, 95);        $range_100 = range(96, 100);                if(in_array($num, $range_5)){ $product_discount_term = '5'; }        if(in_array($num, $range_10)){ $product_discount_term = '10'; }        if(in_array($num, $range_15)){ $product_discount_term = '15'; }        if(in_array($num, $range_20)){ $product_discount_term = '20'; }        if(in_array($num, $range_25)){ $product_discount_term = '25'; }        if(in_array($num, $range_30)){ $product_discount_term = '30'; }        if(in_array($num, $range_35)){ $product_discount_term = '35'; }        if(in_array($num, $range_40)){ $product_discount_term = '40'; }        if(in_array($num, $range_45)){ $product_discount_term = '45'; }        if(in_array($num, $range_50)){ $product_discount_term = '50'; }        if(in_array($num, $range_55)){ $product_discount_term = '55'; }        if(in_array($num, $range_60)){ $product_discount_term = '60'; }        if(in_array($num, $range_65)){ $product_discount_term = '65'; }        if(in_array($num, $range_70)){ $product_discount_term = '70'; }        if(in_array($num, $range_75)){ $product_discount_term = '75'; }        if(in_array($num, $range_80)){ $product_discount_term = '80'; }        if(in_array($num, $range_85)){ $product_discount_term = '85'; }        if(in_array($num, $range_90)){ $product_discount_term = '90'; }        if(in_array($num, $range_95)){ $product_discount_term = '95'; }        if(in_array($num, $range_100)){ $product_discount_term = '100'; }        return $product_discount_term;    }        //Add New Sub Category Term    public function set_sub_attribute_new_term_ajax() {        $taxonomy = $_GET['taxonomy'];        $category_levels = $_GET['category_levels'];               $term = $_GET['term'];        $newtermobject = '';        $checkterm = term_exists($term, $taxonomy);        $category_ids = array();        if ($checkterm == 0 && $checkterm == null) {            $termarray = wp_insert_term( $term, $taxonomy );            if ( !is_wp_error( $termarray ) ) {                $termobject = get_term_by('id', $termarray['term_id'], $taxonomy);                $newterm = '<option value="'.$termobject->slug.'" selected=selected>'.$termobject->name.'</option>';            }        } else {            $termobject = get_term_by('name', $term, $taxonomy);            $newterm = '<option value="'.$termobject->slug.'" selected=selected>'.$termobject->name.'</option>';        }            echo json_encode(array('term_option'=>$newterm));        die(0);    }    //Add New Sub Category Term    public function update_sub_attribute_term_parents($form) {        $product_attributes = $form['product_attribute'];        if(!empty($product_attributes)) {            foreach($product_attributes as $taxonomy => $terms) {                if(!is_array($terms)) {                    $this->apply_terms_parent_relationships($terms, $taxonomy, $form);                } else {                    foreach($terms as $term) {                        $this->apply_terms_parent_relationships($term, $taxonomy, $form);                    }                }            }        }     }    public function apply_terms_parent_relationships($term, $taxonomy, $form = array(), $subattributescsv = array()) {        $termobject = get_term_by('slug', $term, $taxonomy);        $category_ids = array();        //$category_levels = array_merge(array($form['product_category']), $form['product_sub_categories']);         if(empty($subattributescsv)) {            $category_levels = $form['product_sub_categories'];        } else {            $category_levels = $subattributescsv;            unset($category_levels[0]);        }        if(!empty($category_levels)) {            foreach($category_levels as $category_level) {                $category_level_object = get_term_by('slug', $category_level, 'product_cat');                $category_id = $category_level_object->term_id;                $category_ids[] = $category_id;                }            update_tax_meta( $termobject->term_id, 'ba_select_field_id', $category_ids, $taxonomy);        }    }    //Upload Product Images AJAX Handlers    public function product_images_upload_ajax() {        check_ajax_referer('product_images_upload_allow', 'nonce');        $file = array(            'name' => $_FILES['product_images_file']['name'],            'type' => $_FILES['product_images_file']['type'],            'tmp_name' => $_FILES['product_images_file']['tmp_name'],            'error' => $_FILES['product_images_file']['error'],            'size' => $_FILES['product_images_file']['size']        );        $file = $this->fileupload_process($file);        die(0);    }    public function fileupload_process($file)    {        $attachment = $this->handle_file($file);        if (is_array($attachment)) {            $html = $this->getHTML($attachment);            $response = array(                'success' => true,                'html' => $html,            );            echo json_encode($response);            exit;        }        $response = array('success' => false);        echo json_encode($response);        exit;    }    public function handle_file($upload_data)    {        $return = false;        $uploaded_file = wp_handle_upload($upload_data, array('test_form' => false));        if (isset($uploaded_file['file'])) {            $file_loc = $uploaded_file['file'];            $file_name = basename($upload_data['name']);            $file_type = wp_check_filetype($file_name);            $attachment = array(                'post_mime_type' => $file_type['type'],                'post_title' => preg_replace('/\.[^.]+$/', '', basename($file_name)),                'post_content' => '',                'post_status' => 'inherit'            );            $attach_id = wp_insert_attachment($attachment, $file_loc);            $attach_data = wp_generate_attachment_metadata($attach_id, $file_loc);            wp_update_attachment_metadata($attach_id, $attach_data);            $return = array('data' => $attach_data, 'id' => $attach_id);            return $return;        }        return $return;    }    public function getHTML($attachment)    {        $attach_id = $attachment['id'];        $file = explode('/', $attachment['data']['file']);        $file = array_slice($file, 0, count($file) - 1);        $path = implode('/', $file);        $image = $attachment['data']['sizes']['thumbnail']['file'];        $post = get_post($attach_id);        $dir = wp_upload_dir();        $path = $dir['baseurl'] . '/' . $path;        $html = '';        $html .= '<div class="imagepreview productimagessortables col-sm-3 col-xs-3">';        $html .= sprintf('<img src="%s" name="' . $post->post_title . '" class="img-responsive" />', $path . '/' . $image);        $html .= sprintf('<a href="javascript:void(0);" title="Delete Image" class="product_image_delete fa-times-circle-o fa" data-upload_id="%d">%s</a>', $attach_id, __(''));        $html .= sprintf('<input type="hidden" name="product_images[]" value="%d" />', $attach_id);        $html .= '</div>';        return $html;    }    public function delete_product_image_ajax() {        $attach_id = $_POST['attach_id'];        wp_delete_attachment($attach_id, true);        die(0);    }    // Upload Clothing Size Chart Images    public function upload_size_chart_images_ajax() {        check_ajax_referer('upload_size_chart_images_allow', 'nonce');        $file = array(            'name' => $_FILES['size_chart_image_file']['name'],            'type' => $_FILES['size_chart_image_file']['type'],            'tmp_name' => $_FILES['size_chart_image_file']['tmp_name'],            'error' => $_FILES['size_chart_image_file']['error'],            'size' => $_FILES['size_chart_image_file']['size']        );        $file = $this->sizechart_upload_process($file);        die(0);    }    public function sizechart_upload_process($file)    {        $attachment = $this->handle_file($file);        if (is_array($attachment)) {            $html = $this->getSizeChartHTML($attachment);            $response = array(                'success' => true,                'html' => $html,            );            echo json_encode($response);            exit;        }        $response = array('success' => false);        echo json_encode($response);        exit;    }    public function getSizeChartHTML($attachment)    {        $attach_id = $attachment['id'];        $file = explode('/', $attachment['data']['file']);        $file = array_slice($file, 0, count($file) - 1);        $path = implode('/', $file);        $image = $attachment['data']['sizes']['thumbnail']['file'];        $post = get_post($attach_id);        $dir = wp_upload_dir();        $path = $dir['baseurl'] . '/' . $path;        $html = '';        $html .= '<div class="sizechartimagepreview">';        $html .= sprintf('<img src="%s" name="' . $post->post_title . '" class="img-responsive" />', $path . '/' . $image);        $html .= sprintf('<a href="javascript:void(0);" title="Delete Image" class="delete_size_chart_image fa-times-circle-o fa" data-upload_id="%d" style="color: tomato; font-size: 25px;">%s</a>', $attach_id, __(''));        $html .= sprintf('<input type="hidden" name="size_chart_image" value="%d" />', $attach_id);        $html .= '</div>';        return $html;    }}$GLOBALS['ProductUploadObject'] = new ProductUploadsEdit();