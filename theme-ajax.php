<?php/*** MM Theme AJAX Class*/class MM_AJAX {	public function __construct() {		//MM Login AJAX Hook		add_action( 'wp_ajax_mm_login', array($this, 'mm_login_ajax') );		add_action( 'wp_ajax_nopriv_mm_login', array($this, 'mm_login_ajax') );		//MM Merchant Login AJAX Hook		add_action( 'wp_ajax_mm_merchant_login', array($this, 'mm_merchant_login_ajax') );		add_action( 'wp_ajax_nopriv_mm_merchant_login', array($this, 'mm_merchant_login_ajax') );		//MM Logout AJAX Hook		add_action( 'wp_ajax_mm_logout', array($this, 'mm_logout_ajax') );		//MM Get Malls AJAX Hook		add_action( 'wp_ajax_get_malls', array($this, 'mm_get_malls_ajax') );		add_action( 'wp_ajax_nopriv_get_malls', array($this, 'mm_get_malls_ajax') );		add_action( 'wp_ajax_show_malls_dropdown', array($this, 'mm_show_malls_dropdown_ajax') );		add_action( 'wp_ajax_nopriv_show_malls_dropdown', array($this, 'mm_show_malls_dropdown_ajax') );		//MM Get City By Lat and Lng		add_action( 'wp_ajax_get_city_by_latlng', array($this, 'getCityByLatLng') );		add_action( 'wp_ajax_nopriv_get_city_by_latlng', array($this, 'getCityByLatLng') );		//MM Get City By Lat and Lng		add_action( 'wp_ajax_get_city_latlng_from_db', array($this, 'getCityLatLngFromDB') );		add_action( 'wp_ajax_nopriv_get_city_latlng_from_db', array($this, 'getCityLatLngFromDB') );		//MM Get City Malls In Select Box AJAX		add_action( 'wp_ajax_get_city_malls', array($this, 'get_city_malls_ajax') );		add_action( 'wp_ajax_nopriv_get_city_malls', array($this, 'get_city_malls_ajax') );			//MM Get Mall Shops In Select Box AJAX		add_action( 'wp_ajax_get_mall_shops', array($this, 'get_mall_shops_ajax') );		add_action( 'wp_ajax_nopriv_get_mall_shops', array($this, 'get_mall_shops_ajax') );			//MM Get Product Coupon AJAX		add_action( 'wp_ajax_get_product_coupon', array($this, 'get_product_coupon_ajax') );		add_action( 'wp_ajax_nopriv_get_product_coupon', array($this, 'get_product_coupon_ajax') );			//MM DD FS Product Cat Filters AJAX		add_action( 'wp_ajax_dd_fs_product_cat_filters', array($this, 'dd_fs_product_cat_filters_ajax') );		add_action( 'wp_ajax_nopriv_dd_fs_product_cat_filters', array($this, 'dd_fs_product_cat_filters_ajax') );			//MM DD Products Filters AJAX		add_action( 'wp_ajax_deal_discounts_product_filters', array($this, 'deal_discounts_product_filters_ajax') );		add_action( 'wp_ajax_nopriv_deal_discounts_product_filters', array($this, 'deal_discounts_product_filters_ajax') );			//MM DD FS Load All Products AJAX		add_action( 'wp_ajax_load_all_dd_fs_products', array($this, 'load_all_dd_fs_products_ajax') );		add_action( 'wp_ajax_nopriv_load_all_dd_fs_products', array($this, 'load_all_dd_fs_products_ajax') );		//MM Products Attributes Filtering AJAX		add_action( 'wp_ajax_products_attributes_filtering', array($this, 'products_attributes_filtering_ajax') );		add_action( 'wp_ajax_nopriv_products_attributes_filtering', array($this, 'products_attributes_filtering_ajax') );			//MM Show Current Categories Products if there is no filters		add_action( 'wp_ajax_show_current_category_products', array($this, 'show_current_category_products_ajax') );		add_action( 'wp_ajax_nopriv_show_current_category_products', array($this, 'show_current_category_products_ajax') );				//MM Paginate Products		add_action( 'wp_ajax_show_paginate_products', array($this, 'show_paginate_products_ajax') );		add_action( 'wp_ajax_nopriv_show_paginate_products', array($this, 'show_paginate_products_ajax') );				}		//MM Login AJAX	public function mm_login_ajax() {		check_ajax_referer( 'login-nonce', 'security' );		if (!filter_var($email, FILTER_VALIDATE_EMAIL) === false) {                    $user = get_user_by( 'email', $_POST['email'] );                }else{                   $user = get_user_by( 'user_login', $_POST['email'] );                 }               		if(isset($user->user_login)) {			$username = $user->user_login;		} else {			$username = "";		}		$info = array();    	$info['user_login'] = $username;    	$info['user_password'] = $_POST['password'];    	$info['remember'] = $_POST['remember'];    	    	$user_signon = wp_signon( $info, false );//    	print_r($user_signon);    	    	if ( is_wp_error($user_signon) ){        	echo json_encode(array('loggedin'=>false, 'redirecturl'=> '' ));	    } else {	    	if($user_signon->roles[0] == 'merchant'){	    		$redirecturl = 'true';	    	}	    	else{	    		$redirecturl = '';	    	}	        echo json_encode(array( 'loggedin'=>true, 'redirecturl'=> $redirecturl, 'logout_url' => esc_url(wp_logout_url( get_permalink() )) ));	    }		die(0);	}	public function mm_merchant_login_ajax() {		check_ajax_referer( 'login-nonce', 'security' );                if (!filter_var($_POST['email'], FILTER_VALIDATE_EMAIL) === false) {                    $user = get_user_by( 'email', $_POST['email'] );                }else {                    $user = get_user_by( 'login', $_POST['email'] );                }		if(isset($user->user_login)) {			$username = $user->user_login;		} else {			$username = "";		}		$info = array();    	$info['user_login'] = $username;    	$info['user_password'] = $_POST['password'];    	$info['remember'] = $_POST['remember'];        $user = get_userdatabylogin($username);        $user_id = $user->data->ID;        $activation_code = get_user_meta( $user_id, 'activation_key', true );        //        echo $user->data;    	//$activation_code = get_user_meta($user_id, 'activation_key', true);    	if($activation_code == ''){        $user_signon = wp_signon( $info, false );        }         else{            echo json_encode(array('loggedin'=>false, 'redirecturl'=> '' ));        }    	if ( is_wp_error($user_signon)){        	echo json_encode(array('loggedin'=>false, 'redirecturl'=> '' ));	    } else {               	    	if($user_signon->roles[0] == 'merchant'){	    		$redirecturl = 'true';	    		echo json_encode(array( 'loggedin'=>true, 'redirecturl'=> $redirecturl, 'logout_url' => esc_url(wp_logout_url( get_permalink() )) ));	    	}//	    	else{//	    		$redirecturl = '';//	    		wp_logout();//	    		echo json_encode(array('loggedin'=>false, 'redirecturl'=> '' ));//	    	}	    }		die(0);	}	//MM Logout AJAX Hook	public function mm_logout_ajax() {		$security_check = $_GET['_nonce'];		if ( wp_verify_nonce( $security_check, 'MM_logout' ) ) {			wp_clear_auth_cookie();			wp_logout();			$response = "success";		} else {			$response = "error";		}		echo json_encode($response);		die(0);	}    	//Get Malls AJAX	public function mm_get_malls_ajax() {		$malls = array();		$city = $_GET['current_city'];		$latitude = $_GET['lat'];		$longitude = $_GET['lng'];		$radius = $_GET['radius'];		$mall_query = new WP_GeoQuery(array(		  'post_type' => 'mall',			  'post_status' => 'publish',		  'latitude' => $latitude, 		  'longitude' => $longitude, 		  'radius' => $radius, 		  'posts_per_page' => 6, 		));				$mall_count = $this->getMallsCountByCity($city);				foreach($mall_query->posts as $post)		{			$mall_id = $post->ID;			$mall_title = $post->post_title;			$mall_url = get_permalink($mall_id);			$mall_image = wp_get_attachment_url( get_post_thumbnail_id($mall_id) );			$mall_distance = $post->distance;			$malls[] = array(				'id' 		 	=> $mall_id,				'mall_title' 	=> $mall_title,				'mall_image' 	=> $mall_image,				'mall_url' 	    => $mall_url, 				'mall_distance' => $mall_distance,			);		}		$view_all_link = site_url().'/malls/'.$city.'/';		echo json_encode( array('malls' => $malls, 'mall_count' => $mall_count, 'view_all_link' => $view_all_link) );			die(0);		}	public function getCityByLatLng() {		$latitude = $_GET['lat'];		$longitude = $_GET['lng'];		$args = array(			'post_type' => 'city',			'post_status' => 'publish',		);		$city_query = new WP_Query($args);		$city = '';		if($city_query->have_posts()) {			while ( $city_query->have_posts() ) { $city_query->the_post();				$latlng = get_post_meta($city_query->post->ID, 'latlngzoom', true);				$lat = intval($latlng[0]);				$lng = intval($latlng[1]);				$current_lat = intval($latitude);				$current_lng = intval($longitude);				if($current_lat==$lat && $current_lng == $lng) {					$city = $city_query->post->post_name;				}			}		}		wp_reset_postdata();		echo $city;					die(0);	}	public function getCityLatLngFromDB() {		global $wpdb;		$city = $_GET['city'];		$cityobj = $wpdb->get_results( "SELECT * FROM $wpdb->posts WHERE post_name = '".$city."' and post_type = 'city'", OBJECT );		$latlng = array();		if($cityobj) {			$cityid = $cityobj[0]->ID;			$latlng = get_post_meta($cityid, 'latlngzoom', true);		}		echo json_encode($latlng);		die(0);	}	public function getMallsCountByCity( $city ) {		global $wpdb;		$sql = "SELECT count(DISTINCT pm.post_id)		FROM $wpdb->postmeta pm		JOIN $wpdb->posts p ON (p.ID = pm.post_id)		WHERE pm.meta_key = 'city'		AND pm.meta_value = '$city'		AND p.post_type = 'mall'		AND p.post_status = 'publish'		";		$count = $wpdb->get_var($sql);		return $count;	}	public function get_city_malls_ajax() {		$city = $_GET['city'];		$args = array(			'post_type' => 'mall',			'post_status' => 'publish',			'meta_query' => array(		        array(		            'key' => 'city',		            'value' => $city,		            'compare'       => '==',                    'type'          => 'CHAR'		        )		     )		);		$mall_query = new WP_Query($args);		$malls = array();		if($mall_query->have_posts()) {			while ( $mall_query->have_posts() ) { $mall_query->the_post();				$selected = "";				$mall_id =  $mall_query->post->ID;				$mall_title =  $mall_query->post->post_title;				$malls[] = array($mall_id, $mall_title);			}		}		wp_reset_postdata();		echo json_encode(array( 'malls' => $malls ));		die(0);	}	public function mm_show_malls_dropdown_ajax() {		$city = $_GET['city'];		$numberofposts = 5;		$args = array(			'post_type' => 'mall',			'post_status' => 'publish',			'posts_per_page' => $numberofposts,			'meta_query' => array(		        array(		            'key' => 'city',		            'value' => $city,		            'compare'       => '==',                    'type'          => 'CHAR'		        )		     )		);		$mall_query = new WP_Query($args);		$malls  = '';		$total_posts = $mall_query->found_posts;		if($mall_query->have_posts()) {			$malls .= '<ul class="mega-sub-menu" style="padding:0px;">';			while ( $mall_query->have_posts() ) { $mall_query->the_post();				$selected = "";				$mall_id =  $mall_query->post->ID;				$mall_title =  $mall_query->post->post_title;				$mall_slug = $mall_query->post->post_name;				$url = get_permalink($mall_id);				$malls .= '<li class="menu-'.$mall_slug.' mega-menu-item mega-menu-item-type-custom mega-menu-item-object-custom mega-menu-columns-1"><a href="'.$url.'">'.$mall_title.'</a></li>';			}			if($total_posts>$numberofposts) {				$malls .= '<li class="menu-viewall-malls mega-menu-item mega-menu-item-type-custom mega-menu-item-object-custom mega-menu-columns-1" style="text-align: center;"><a href="'.site_url().'/malls/'.$city.'/" style="background: #3b3b3b; color: #fff; font-size: 14px;">View All</a></li>';			}			$malls .= '</ul>';		}		wp_reset_postdata();		$mobile_malls_url = site_url().'/malls/'.$city.'/';		echo json_encode(array( 'malls' => $malls, 'mobile_malls_url' => $mobile_malls_url ));		die(0);	}	public function get_mall_shops_ajax() {		$mall_id = $_GET['mall_id'];		$shops = array();		$args = array(			'post_type' => 'shop',			'post_status' => 'publish',			'order' => 'ASC',		    'meta_query' => array(		        array(		            'key' => 'mall',		            'value' => $mall_id,		            'compare'       => 'IN',                    'type'          => 'NUMERIC'		        )		     )		);		$shop_query = new WP_Query($args);		if($shop_query->have_posts()) {			while ( $shop_query->have_posts() ) { $shop_query->the_post();				$shop_id = $shop_query->post->ID;				$shop_title = $shop_query->post->post_title;				$shops[] = array($shop_id, $shop_title);			}			}			wp_reset_postdata();				echo json_encode(array( 'shops' => $shops ));		die(0);	}	public function ValidatePhoneNumber($value) {    	$filtered = preg_replace("/\D/","",$value);    	return strlen($filtered) == 10;	}	public function send_sms_api_callback( $text, $phone_no ) {		$theme_settings = unserialize(get_option('global_theme_settings'));		$user = trim($theme_settings['sms_username']);		$pass = trim($theme_settings['sms_password']);		$sender = trim($theme_settings['sms_sender']);		$priority = trim($theme_settings['sms_priority']);		$stype = trim($theme_settings['sms_type']);		$sms_api_data = array(			'user' => $user,			'pass' => $pass,			'sender' => $sender,			'phone' => $phone_no,			'text' => $text,			'priority' => $priority,			'stype' => $stype,		);				$response = wp_remote_post('http://bhashsms.com/api/sendmsg.php', array(			'method'		=> 'POST',			'body' 			=> $sms_api_data,			'timeout' 		=> 70,			'sslverify' 	=> false,			'user-agent' 	=> 'Memalling',			'httpversion'   => '1.1'		));			}	public function get_product_coupon_ajax() {		global $wpdb, $MM_EMAILTEMPLATES;		                		$site_email = get_option('admin_email');        $site_title = get_bloginfo('name');		$form_values = $_POST['form_values'];                        parse_str($form_values, $form);                $action = $form['form-action'];        $product_author = $form['product_author'];        $product_id = $form['product_id'];        $user_phone = $form['user_phone'];        $user_email = $form['user_email'];        $flag = true;        $result = "";        $message = "";        $user_email_phone = '';        $selected_size = $_POST['selected_size'];        $validate_phone_number = $this->ValidatePhoneNumber($user_phone);        if( trim($user_email) == '' && trim($user_phone) == '' ) {        	$result = "error";		    $message .= "<li>Please Enter Your Email Address or Phone Number!!!</li>";	        $flag = false;        }        if( trim($user_phone)!='' ) {	        if(!$validate_phone_number) {	        	$result = "error";		        $message .= "<li>Please Enter Valid Phone Number.</li>";	        	$flag = false;	        }	        else {    			$user_email_phone = trim($user_phone);    		}    	}     	if( trim($user_email)!='' ) {	        if(!filter_var($user_email, FILTER_VALIDATE_EMAIL)) {	        	$result = "error";		        $message .= "<li>Please Enter Valid Email Address.</li>";	        	$flag = false;	        }	        else {    			$user_email_phone = trim($user_email);    		}    	}         if($flag == true) {   	        if($action == "malling") {	        	if ( $wpdb->get_var( $wpdb->prepare("	                SELECT $wpdb->posts.ID	                FROM $wpdb->posts	                INNER JOIN $wpdb->postmeta key1 ON ($wpdb->posts.ID = key1.post_id)	                AND key1.meta_key = '_product_id' AND key1.meta_value = '%s'	                INNER JOIN $wpdb->postmeta key2 ON ($wpdb->posts.ID = key2.post_id)	                AND key2.meta_key = '_user_email_phone' AND key2.meta_value = '%s'	                WHERE $wpdb->posts.post_type = 'coupon'	                AND $wpdb->posts.post_status = 'publish'	                ", $product_id, $user_email_phone ) ) ) 	            {	            	$result = "error";	            	if($user_email!='') {	            		$message .= "<li>Coupon Code is already Generated for this product on your email id</li>";	            	} else {	            		$message .= "<li>Coupon Code is already Generated for this product on your phone number</li>";	            	}	            } else {	            	//Generate Unique Coupon Code	            	$coupon_code = $this->generate_coupon_code();	            		            	$args = array(					  'post_title'    => $coupon_code,					  'post_content'  => '',					  'post_status'   => 'publish',					  'post_type'	  => 'coupon',					  'post_author'   => $product_author,					);					// Insert the post into the database					$coupon_id = wp_insert_post( $args );					update_post_meta($coupon_id, '_user_email_phone', $user_email_phone);					update_post_meta($coupon_id, '_email_address', $user_email);					update_post_meta($coupon_id, '_user_phone', $user_phone);					update_post_meta($coupon_id, '_product_id', $product_id);					$product_sku = get_post_meta($product_id, '_sku', true);					$mall_id = get_user_meta( $product_author, 'user_mall', true );					$shop_id = get_user_meta( $product_author, 'user_shop', true );                                        	            	$mall_object = get_post($mall_id);	            	$mall = $mall_object->post_title;	            	$shop_object = get_post($shop_id);	            	$shop = $shop_object->post_title;	            	$product_shopid = get_post_meta($product_id,'shop',true);	            	$lat1 = isset($_COOKIE['me_lat']) ? $_COOKIE['me_lat'] : '';					$lng1 = isset($_COOKIE['me_lng']) ? $_COOKIE['me_lng'] : '';					$lat2 = get_post_meta($product_shopid, 'latitude', true);					$lng2 = get_post_meta($product_shopid, 'longitude', true);					$unitdistance = 'K';					$distance_flag = calc_distance($lat1, $lng1, $lat2, $lng2, $unitdistance);	            	if($user_email!='') {		            	//To User Email on Coupon Generation						$shopkeeper = get_user_by('id', $product_author);						$shopkeeper_email_id = $shopkeeper->user_email;						$user_message   = '<p><b>Mall Name:</b> '.$mall.'</p>';						$user_message  .= '<p><b>Shop Name:</b> '.$shop.'</p>';												$user_message  .= '<p><b>Product ID:</b> '.$product_sku.'</p>';						$user_message  .= '<p><b>Coupon Code:</b> '.$coupon_code.'</p>';						if($distance_flag!='error') {							$direction_link = '<a href="https://maps.google.com?saddr='.$lat1.','.$lng1.'&daddr='.$lat2.','.$lng2.'" target="_blank">Get Direction</a>';							$user_message .= '<p>'.$direction_link.'</p>';							}						if( trim($selected_size)!='' ) {							$user_message  .= '<p><b>Your Selected Size :</b> '.$selected_size.'</p>';						}						$this->send_product_coupon_order_email($user_message, 'Product Coupon', $shopkeeper_email_id, $user_email, 'Product Coupon');						//To Shopkeeper or Product Publisher Email on Coupon Generation						$shopkeeper_message  = '<p>There is New Coupon generated on <b>Product ID:</b> '.$product_sku.' </p>';						$shopkeeper_message  .= '<p><b>Coupon Code:</b> '.$coupon_code.'</p>';						if( trim($selected_size)!='' ) {							$shopkeeper_message  .= '<p><b>Selected Size :</b> '.$selected_size.'</p>';						}						$shopkeeper_message  .= '<p><b><u>User Details:</u></b></p>';						$shopkeeper_message  .= '<p><b>Email ID:</b> '.$user_email.'</p>';						$shopkeeper_message  .= '<p><b>Phone No.:</b> '.$user_phone.'</p>';												$this->send_product_coupon_order_email($shopkeeper_message, 'Product Coupon Generated', $site_email, $shopkeeper_email_id, 'New Coupon Generated');					} 					//Send SMS to merchant of product					$merchant_phone_no = get_user_meta($product_author, 'phone_no', true);                                 					$shopkeeper_text  = 'There is New Coupon generated on Product ID: '.$product_sku.''.PHP_EOL;					$shopkeeper_text .= 'Coupon Code: '.$coupon_code.''.PHP_EOL;					if( trim($selected_size)!='' ) {						$shopkeeper_text  .= 'Selected Size: '.$selected_size.''.PHP_EOL;						}					$shopkeeper_text .= 'User Details: '.PHP_EOL;					$shopkeeper_text .= 'Email: '.urldecode(str_replace('@', ' %40', $user_email)).''.PHP_EOL;					if($user_phone!='') {						$shopkeeper_text .= 'Phone No: '.$user_phone.''.PHP_EOL;												}					$this->send_sms_api_callback( $shopkeeper_text, trim($merchant_phone_no) );					if($user_phone!='') {														//Send SMS to User 						$user_phone_no = $user_phone;						$user_text  = 'Mall Name: '.$mall.''.PHP_EOL;						$user_text .= 'Shop Name: '.$shop.''.PHP_EOL;						$user_text .= 'Product ID: '.$product_sku.''.PHP_EOL;						$user_text .= 'Coupon Code: '.$coupon_code.''.PHP_EOL;							if( trim($selected_size)!='' ) {							$user_text  .= 'Selected Size: '.$selected_size.''.PHP_EOL;							}						if($distance_flag!='error') {							// $direction_link = 'https://maps.google.com?saddr='.$lat1.','.$lng1.'&daddr='.$lat2.','.$lng2;							// $direction_link = get_tiny_url($direction_link);							// $user_text .= 'Get Direction : '.$direction_link.''.PHP_EOL;							}						$this->send_sms_api_callback( $user_text, trim($user_phone_no) );						}					if($user_email!='' && $user_phone!='') {	            		$message = "<li>Coupon Generated Successfully. Please Check Your Email and Phone SMS!!!</li>";	            	} else if($user_email!='') {	            		$message = "<li>Coupon Generated Successfully. Please Check Your Email</li>";	            	} else if($user_phone!='') {	            		$message = "<li>Coupon Generated Successfully. Please Check Your Phone SMS</li>";	            	}	            	$result = "success";	            }	        } else {                    	        	if ( $wpdb->get_var( $wpdb->prepare("	                SELECT $wpdb->posts.ID	                FROM $wpdb->posts	                INNER JOIN $wpdb->postmeta key1 ON ($wpdb->posts.ID = key1.post_id)	                AND key1.meta_key = '_product_id' AND key1.meta_value = '%s'	                INNER JOIN $wpdb->postmeta key2 ON ($wpdb->posts.ID = key2.post_id)	                AND key2.meta_key = '_user_email_phone' AND key2.meta_value = '%s'	                WHERE $wpdb->posts.post_type = 'merchant_orders'	                AND $wpdb->posts.post_status = 'publish'	                ", $product_id, $user_email_phone ) ) ) 	            {	            	$result = "error";	            	if($user_email!='') {	            		$message .= "<li>Your Order is already Generated for this product on your email id</li>";	            	} else {	            		$message .= "<li>Your Order is already Generated for this product on your phone number</li>";	            	}	            } else {	            	//Generate Order	            		            		            	$args = array(					  'post_title'    => '',					  'post_content'  => '',					  'post_status'   => 'publish',					  'post_type'	  => 'merchant_orders',					  'post_author'   => $product_author,					);					// Insert the post into the database					$order_id = wp_insert_post( $args );					update_post_meta($coupon_id, '_user_email_phone', $user_email_phone);					update_post_meta($order_id, '_email_address', $user_email);					update_post_meta($order_id, '_phone', $user_phone);					update_post_meta($order_id, '_product_id', $product_id);					$product_sku = get_post_meta($product_id, '_sku', true);                        $mall_id = get_user_meta( $product_author, 'user_mall', true );                        $shop_id = get_user_meta( $product_author, 'user_shop', true );                        $shop_number = get_post_meta($shop_id, 'shop_phone_num', true);                                                	            	$mall_object = get_post($mall_id);	            	$mall = $mall_object->post_title;	            	$shop_object = get_post($shop_id);	            	$shop = $shop_object->post_title;                        	            	if($user_email!='') {		            	//To User Email on Coupon Generation						$shopkeeper = get_user_by('id', $product_author);						$shopkeeper_email_id = $shopkeeper->user_email;						$user_message   = '<p><b>Mall Name:</b> '.$mall.'</p>';						$user_message  .= '<p><b>Shop Name:</b> '.$shop.'</p>';						$user_message  .= '<p><b>Product ID:</b> '.$product_sku.'</p>';						$user_message  .= '<p><b>Order ID:</b> '.$order_id.'</p>';						if( trim($selected_size)!='' ) {							$user_message  .= '<p><b>Your Selected Size :</b> '.$selected_size.'</p>';						}						$this->send_product_coupon_order_email($user_message, 'Product Order', $shopkeeper_email_id, $user_email, 'Product Order');						//To Shopkeeper or Product Publisher Email on Coupon Generation						$shopkeeper_message  = '<p>There is New order generated on <b>Product ID:</b> '.$product_sku.' </p>';						$shopkeeper_message  .= '<p><b>Order ID:</b> '.$order_id.'</p>';						$shopkeeper_message  .= '<p><b><u>User Details:</u></b></p>';						$shopkeeper_message  .= '<p><b>Email ID:</b> '.$user_email.'</p>';						$shopkeeper_message  .= '<p><b>Phone No.:</b> '.$user_phone.'</p>';						if( trim($selected_size)!='' ) {							$shopkeeper_message  .= '<p><b>Selected Size :</b> '.$selected_size.'</p>';						}						$this->send_product_coupon_order_email($shopkeeper_message, 'Order Generated', $site_email, $shopkeeper_email_id, 'New Order Generated');					}					//Send SMS to merchant of product                                        $shop_id = get_user_meta( $product_author, 'user_shop', true );					$merchant_phone_no = get_user_meta($product_author, 'phone_no', true);					$shopkeeper_text  = 'There is New order generated on Product ID: '.$product_sku.''.PHP_EOL;					$shopkeeper_text  .= 'Order ID: '.$order_id.''.PHP_EOL;					if( trim($selected_size)!='' ) {						$shopkeeper_text  .= 'Selected Size: '.$selected_size.''.PHP_EOL;						}						$shopkeeper_text  .= 'User Details: '.PHP_EOL;					$shopkeeper_text .= 'Email: '.urldecode(str_replace('@', ' %40', $user_email)).''.PHP_EOL;										if($user_phone!='') {						$shopkeeper_text  .= 'Phone No: '.$user_phone.''.PHP_EOL;						}					$this->send_sms_api_callback( $shopkeeper_text, trim($shop_number) );											if($user_phone!='') {						//Send SMS to User 						$user_phone_no = $user_phone;						$user_text   = 'Mall Name: '.$mall.''.PHP_EOL;						$user_text  .= 'Shop Name: '.$shop.''.PHP_EOL;						$user_text  .= 'Product ID: '.$product_sku.''.PHP_EOL;						$user_text  .= 'Order ID: '.$order_id.''.PHP_EOL;						if( trim($selected_size)!='' ) {							$user_text  .= 'Selected Size: '.$selected_size.''.PHP_EOL;							}							$this->send_sms_api_callback( $user_text, trim($user_phone_no) );						}					if($user_email!='' && $user_phone!='') {	            		$message = "<li>Order Generated Successfully<br/>Shopkeeper will connect with you. Please Check Your Email and SMS!!!</li>";	            	} else if($user_email!='') {	            		$message = "<li>Order Generated Successfully<br/>Shopkeeper will connect with you. Please Check Your Email!!!</li>";	            	} else if($user_phone!='') {	            		$message = "<li>Order Generated Successfully<br/>Shopkeeper will connect with you. Please Check Your SMS!!!</li>";	            	}	            		            	$result = "success";	            }	        }                    	}        echo json_encode(array("result" => $result, "message" => $message));		die(0);	}	public function generate_coupon_code() {		global $wpdb;		$passes = array();	 	$chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghkmnopqrstuvwxyz023456789";		srand((double)microtime()*1000000);		$amount = 100;		$length = 6;   		for($j=0; $j<$amount; $j++)		{		    $i = 0; $pass = '' ;			while ($i <= $length)			{ 				$num = rand() % 33; $tmp = substr($chars, $num, 1);				$pass = $pass . $tmp; $i++;			}			$passes[] = $pass;	    }		$coupon = strtoupper(substr(md5($passes[0]),0,5));		//Check Coupon Code Already Exist		if ( $wpdb->get_var( $wpdb->prepare("                SELECT $wpdb->posts.ID                FROM $wpdb->posts                WHERE $wpdb->posts.post_type = 'coupon'                AND $wpdb->posts.post_title = '%s'                ", $coupon ) ) )         {        	$this->generate_coupon_code();        	exit;        }			return $coupon;	}	public function send_product_coupon_order_email($message, $heading, $from_email_id, $to_email, $subject) {		global $MM_EMAILTEMPLATES;		$site_title = get_bloginfo('name');		$htmlmessage = $MM_EMAILTEMPLATES->load_email_templates('email-template', $message, $heading);		$headers = 'From: '.$site_title.' < '.$from_email_id.'>' . "\r\n";		$subject = $site_title.': '.$subject;                $to = array($to_email, 'pratik.deshmukh@netmadeez.com');		$mail = wp_mail( $to, $subject, $htmlmessage, $headers );	}	public function dd_fs_product_cat_filters_ajax() {		global $MMGlobalFunctions;		$categories = $_GET['cats'];		$ddfsproducts = $_GET['ddfsproducts'];		$city = $_GET['city'];		$products = "";		$cols = 4;			/*** Deals & Discounts Products ***/				if($ddfsproducts == 'dd') {				$ddargs = array(					'post_type' => 'product',					'post_status' => 'publish',					"meta_key" => "_product_deal_discount",					'orderby' => 'meta_value_num',					"order" => "DESC",					'meta_query' => array(						array(					        'key' => 'city',					        'value' => $city,					        'compare'       => '==',				            'type'          => 'CHAR'					    )					),					'tax_query' => array(						array(							'taxonomy' => 'product_cat',							'field'    => 'slug',							'terms'    => $categories,						)					),						'posts_per_page' => -1,				);				$dd_product_query = new WP_Query($ddargs);				if($dd_product_query->have_posts()) {					while($dd_product_query->have_posts()) {						$dd_product_query->the_post();						$product_id = $dd_product_query->post->ID;						$mobile_class = 'col-xs-6';						$products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);					}				}				wp_reset_postdata();			} 			/*** Fresh Stocks Products ***/			else {				$freshargs = array(					'post_type' => 'product',					'post_status' => 'publish',					'meta_key' => 'no_deal_discount',					'orderby' => 'date',					'order' => 'DESC',					'meta_query' => array(						array(					        'key' => 'city',					        'value' => $city,					        'compare'       => '==',				            'type'          => 'CHAR'					    )				    ),				    'tax_query' => array(						array(							'taxonomy' => 'product_cat',							'field'    => 'slug',							'terms'    => $categories,						)					),					'posts_per_page' => -1,				);				$fresh_product_query = new WP_Query($freshargs);				if($fresh_product_query->have_posts()) {					while($fresh_product_query->have_posts()) {						$fresh_product_query->the_post();						$product_id = $fresh_product_query->post->ID;						$mobile_class = 'col-xs-6';						$products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);					}				}				wp_reset_postdata();			}		echo json_encode(array('products'=>$products));		die(0);	}	public function deal_discounts_product_filters_ajax() {		global $MMGlobalFunctions;		$categories = $_GET['cats'];		$ddfsproducts = $_GET['ddfsproducts'];		$city = $_GET['city'];		$dd = $_GET['dd'];		if($dd=='deals') {			$meta_key = 'product_deal_flag';			$posts_per_page = -1;		} else if($dd=='discounts') {			$meta_key = '_product_discount_number';			$posts_per_page = -1;		} else {			$meta_key = '_product_deal_discount';			if(empty($categories)) {				$posts_per_page = 12;			} else {				$posts_per_page = -1;			}		}		$products = "";		$cols = 4;		$ddargs = array(			'post_type' => 'product',			'post_status' => 'publish',			"meta_key" => $meta_key,			'orderby' => 'meta_value_num',			"order" => "DESC",			'meta_query' => array(				array(			        'key' => 'city',			        'value' => $city,			        'compare'       => '==',		            'type'          => 'CHAR'			    )			),			'posts_per_page' => $posts_per_page,		);		if(!empty($categories)) {			$ddargs['tax_query'] = array(				array(					'taxonomy' => 'product_cat',					'field'    => 'slug',					'terms'    => $categories,				)			);			}		$dd_product_query = new WP_Query($ddargs);		if($dd_product_query->have_posts()) {			while($dd_product_query->have_posts()) {				$dd_product_query->the_post();				$product_id = $dd_product_query->post->ID;				$products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols);			}		}		wp_reset_postdata();		if(($dd=='deals' || $dd=='discounts') && !empty($categories)) {			$pagination = "";		} else {			$pagination = mm_pagenavi_ajax( array('echo'=> false, 'query' => $dd_product_query) );		}				echo json_encode(array("products"=>$products, "pagination"=>$pagination));		die(0);	}	public function load_all_dd_fs_products_ajax() {		global $MMGlobalFunctions;		$categories = $_GET['cats'];		$ddfsproducts = $_GET['ddfsproducts'];		$city = $_GET['city'];		$page = 1;		$products = "";		$cols = 4;		$posts_per_page = 15;		/*** Deals & Discounts Products ***/			if($ddfsproducts == 'dd') {			$ddargs = array(				'post_type' => 'product',				'post_status' => 'publish',				"meta_key" => "_product_deal_discount",				'orderby' => 'meta_value_num',				"order" => "DESC",				'meta_query' => array(					array(				        'key' => 'city',				        'value' => $city,				        'compare'       => '==',			            'type'          => 'CHAR'				    )				),				'posts_per_page' => $posts_per_page,				'paged' => $page			);			$dd_product_query = new WP_Query($ddargs);			if($dd_product_query->have_posts()) {				while($dd_product_query->have_posts()) {					$dd_product_query->the_post();					$product_id = $dd_product_query->post->ID;					$mobile_class = 'col-xs-6';					$products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);				}			}			wp_reset_postdata();			$pagination = mm_pagenavi_ajax( array('echo'=> false, 'query' => $dd_product_query) );		} else {			$freshargs = array(				'post_type' => 'product',				'post_status' => 'publish',				'meta_key' => 'no_deal_discount',				'orderby' => 'date',				'order' => 'DESC',				'meta_query' => array(					array(				        'key' => 'city',				        'value' => $city,				        'compare'       => '==',			            'type'          => 'CHAR'				    )			    ),				'posts_per_page' => $posts_per_page,				'paged' => $page			);			$fresh_product_query = new WP_Query($freshargs);								if($fresh_product_query->have_posts()) {				while($fresh_product_query->have_posts()) {					$fresh_product_query->the_post();					$product_id = $fresh_product_query->post->ID;					$mobile_class = 'col-xs-6';					$products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);				}			}			wp_reset_postdata();			$pagination = mm_pagenavi_ajax( array('echo'=> false, 'query' => $fresh_product_query) );		}				echo json_encode(array("products"=>$products, "pagination"=>$pagination));		die(0);	}	//MM Load More Category Products	public function load_more_cat_products_ajax() {		global $MMGlobalFunctions;		$city = $_GET['city'];		$terms = array($_GET['category']);		$page = $_GET['paged'];		$posts_per_page = 12;		$cols = 4;		$products = "";		$args = array(		  'post_type' => 'product',		  'post_status' => 'publish',		  'meta_key' => '_product_dd_ndd_order',		  'orderby' => 'meta_value_num',		  'order' => 'DESC',		  'meta_query' => array(		    array(		          'key' => 'city',		          'value' => $city,		          'compare'       => '==',		          'type'          => 'CHAR'		      )		    ),		  'tax_query' => array(		    array(		      'taxonomy' => 'product_cat',		      'field'    => 'id',		      'terms'    => $terms,		    )		  ),		  'posts_per_page' => $posts_per_page,		  'cache_results'  => false,		  'paged' => $page,		);		$product_query = new WP_Query($args);		if($product_query->have_posts()) {		  while ($product_query->have_posts()) : $product_query->the_post(); 		  $product_id = $product_query->post->ID;		  $mobile_class = 'col-xs-6';		  $products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);		  endwhile; 		}		wp_reset_postdata();		$product_query = null;		echo json_encode(array('products'=>$products));		die(0);	}	//MM Products Attributes Filtering AJAX	public function products_attributes_filtering_ajax() {		global $MMGlobalFunctions;		$city = $_GET['city'];                $min = $_GET['min_price'];                $max = $_GET['max_price'];		if(isset($_GET['main_category']) && $_GET['main_category']!='') {			$main_category = array($_GET['main_category']);		} else {			$main_category = '';		}                		$cats = $_GET['cats'];		$dnd = isset($_GET['dnd']) ? $_GET['dnd'] : '_product_dd_ndd_order';		$posts_per_page = -1;		$cols = 4;		$taxterms = array();		$taxqueryarray = array();		if(!empty($cats)) {			foreach($cats as $key => $value) {				if(!in_array($value['taxonomy'], $taxterms)) {					$taxterms[$value['taxonomy']][] = $value['term'];				} else {					$taxterms[$value['taxonomy']][] = $value['term']; 				}			}		}		if(!empty($taxterms)) {			$taxqueryarray['tax_query']['relation'] = 'AND';			$taxqueryarray['tax_query'][] = array(			      'taxonomy' => 'product_cat',			      'field'    => 'id',			      'terms'    => $main_category,			);			foreach($taxterms as $tax => $terms) {				$taxqueryarray['tax_query'][] = array(					'taxonomy' => $tax,					'field' => 'slug',					'terms' => $terms				);			}		}					if(!empty($taxqueryarray)) {			$products = "";			$args = array(			  'post_type' => 'product',			  'post_status' => 'publish',			  'meta_key' => $dnd,			  'orderby' => 'meta_value_num',			  'order' => 'DESC',			  'meta_query' => array(			    array(			          'key' => 'city',			          'value' => $city,			          'compare'       => '==',			          'type'          => 'CHAR'			      )			    ),                            'tax_query' => $taxqueryarray['tax_query'],			    'posts_per_page' => -1,			    'cache_results'  => false,			);                        //                        ------------------------- AVAILABLE PRICE RANGE QUERY -------------------------------                                                $available_price_query = new WP_Query( $args );                        $min_price='';                        $max_price='';                        if ( $available_price_query->have_posts() ) {                                while ( $available_price_query->have_posts() ) {                                        $available_price_query->the_post();                                        $product_id = $available_price_query->post->ID;                                        if(get_post_meta( $product_id, '_sale_price', true) !='') {                                            $available_price[] = get_post_meta( $product_id, '_sale_price', true);                                        } else {                                            $available_price[] = get_post_meta( $product_id, '_regular_price', true);                                        }                                }                        }                        /* Restore original Post Data */                        wp_reset_postdata();                        if(! empty( $available_price ) ) {                            $min_price = min($available_price);                            $max_price = max($available_price);                        }                                                //                        ---------------------------END OF AVAILABLE PRICE RANGE QUERY-----------------------------                        $product_args = array(			  'post_type' => 'product',			  'post_status' => 'publish',			  'meta_key' => $dnd,			  'orderby' => 'meta_value_num',			  'order' => 'DESC',			  'meta_query' => array(			    array(			          'key' => 'city',			          'value' => $city,			          'compare'       => '==',			          'type'          => 'CHAR'			      )			    ),                            'tax_query' => $taxqueryarray['tax_query'],			    'posts_per_page' => 15,			    'cache_results'  => false,			);			$product_ids = array();			$product_query = new My_WP_Query($product_args);                        $price = array();                        $regular_price = array();			if($product_query->have_posts()) {			  while ($product_query->have_posts()) : $product_query->the_post();                             $product_id = $product_query->post->ID;                            if(get_post_meta( $product_id, '_sale_price', true) !='') {                                $price[] = get_post_meta( $product_id, '_sale_price', true);                            } else {                                $price[] = get_post_meta( $product_id, '_regular_price', true);                            }                            $product_ids[] = $product_id;                            $mobile_class = 'col-xs-6';                            $products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);			                            endwhile; 			                            $products .= '<div class="clearfix"></div>';			}                        if(! empty( $price ) ) {                            $current_min_price = min($price);                            $current_max_price = max($price);                        }			$pagination = mm_pagenavi_ajax( array('echo'=> false, 'query' => $product_query) );                        wp_reset_postdata();			$available_price_query = null;                        $product_query=null;		}		echo json_encode(array("products"=>$products, "pagination"=>$pagination, 'new_product_attributes' => $product_ids, 'product_max_price' => $max_price, 'product_min_price' => $min_price, 'current_max_price' => $current_max_price, 'current_min_price' => $current_min_price));		die(0);	}	//Show Current Category Products if there is no filter	public function show_current_category_products_ajax() {		global $MMGlobalFunctions, $wpdb;				$city = $_GET['city'];		if(isset($_GET['main_category']) && $_GET['main_category']!='') {			$main_category = array($_GET['main_category']);		} else {			$main_category = '';		}                $main_category = $_GET['main_category'];		$dnd = isset($_GET['dnd']) ? $_GET['dnd'] : '_product_dd_ndd_order';		$posts_per_page = 15;		$cols = 4;		$products = "";                                $args = array(		   'post_type' => 'product',		   'post_status' => 'publish',		   'meta_key' => $dnd,		   'orderby' => 'meta_value_num',		   'order' => 'DESC',		   'meta_query' => array(			  				    array(			          'key' => 'city',			          'value' => $city,			          'compare'       => '==',			          'type'          => 'CHAR'			    ),		    ),		    'posts_per_page' => -1,		    'cache_results'  => false,		    'paged' => 1,		);                if($main_category!='') {			$args['tax_query'][] = array(			    'taxonomy' => 'product_cat',			    'field'    => 'id',			    'terms'    => $main_category,			);		}                                //                        ------------------------- AVAILABLE PRICE RANGE QUERY -------------------------------                                                $available_price_query = new WP_Query( $args );                        $min_price='';                        $max_price='';                        if ( $available_price_query->have_posts() ) {                                while ( $available_price_query->have_posts() ) {                                        $available_price_query->the_post();                                        $product_id = $available_price_query->post->ID;                                        if(get_post_meta( $product_id, '_sale_price', true) !='') {                                            $available_price[] = get_post_meta( $product_id, '_sale_price', true);                                        } else {                                            $available_price[] = get_post_meta( $product_id, '_regular_price', true);                                        }                                }                        }                        /* Restore original Post Data */                        wp_reset_postdata();                        if(! empty( $available_price ) ) {                            $min_price = min($available_price);                            $max_price = max($available_price);                        }                                                //                        ---------------------------END OF AVAILABLE PRICE RANGE QUERY-----------------------------		$product_args = array(		   'post_type' => 'product',		   'post_status' => 'publish',		   'meta_key' => $dnd,		   'orderby' => 'meta_value_num',		   'order' => 'DESC',		   'meta_query' => array(			  				    array(			          'key' => 'city',			          'value' => $city,			          'compare'       => '==',			          'type'          => 'CHAR'			    ),		    ),		    'posts_per_page' => $posts_per_page,		    'cache_results'  => false,		    'paged' => 1,		);		if($main_category!='') {			$product_args['tax_query'][] = array(			    'taxonomy' => 'product_cat',			    'field'    => 'id',			    'terms'    => $main_category,			);		}				$product_query = new My_WP_Query($product_args);		//print_r($product_query);                $product_ids = array();		if($product_query->have_posts()) {		  while ($product_query->have_posts()) : $product_query->the_post(); 		  $product_id = $product_query->post->ID;                  if(get_post_meta( $product_id, '_sale_price', true) !='') {                        $price[] = get_post_meta( $product_id, '_sale_price', true);                    } else {                        $price[] = get_post_meta( $product_id, '_regular_price', true);                    }                  $product_ids[] = $product_id;		  $mobile_class = 'col-xs-6';		  $products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);		  endwhile; 		  $products .= '<div class="clearfix"></div>';		}                if(! empty( $price ) ) {                    $current_min_price = min($price);                    $current_max_price = max($price);                }		$pagination = mm_pagenavi_ajax( array('echo'=> false, 'query' => $product_query) );		wp_reset_postdata();		$product_query = null;					echo json_encode(array("products"=>$products, "pagination"=>$pagination, 'new_product_attributes' => $product_ids, 'product_max_price' => $max_price, 'product_min_price' => $min_price, 'current_max_price' => $current_max_price, 'current_min_price' => $current_min_price));                		die(0);	}		public function show_paginate_products_ajax() {		$products_source = $_GET['products_source'];		$city = $_GET['city'];		$page = $_GET['page'];		$product_cats = $_GET['product_cats'];		$mall_id = $_GET['mall_id'];		$viewby = $_GET['viewby'];		$search_term = $_GET['search_term'];			if($products_source == 'dd') {			$result = $this->dd_products_paginate($page, $city);		}		if($products_source == 'fs') {			$result = $this->fresh_products_paginate($page, $city);		}		if($products_source == 'shop') {		}		if($products_source == 'product_categories') {			$result = $this->category_products_paginate($page, $city, $product_cats);		}		if($products_source == 'search_products_page') {			$result = $this->products_search_page_paginate($page, $city, $search_term, $dnd);		}				echo json_encode($result);		die(0);	}	public function dd_products_paginate($page, $city) {		global $MMGlobalFunctions;		$cols = 4;		$posts_per_page = 15;		$ddargs = array(			'post_type' => 'product',			'post_status' => 'publish',			"meta_key" => "_product_deal_discount",			'orderby' => 'meta_value_num',			"order" => "DESC",			'meta_query' => array(				array(			        'key' => 'city',			        'value' => $city,			        'compare'       => '==',			           'type'          => 'CHAR'			    )			),			'posts_per_page' => $posts_per_page,			'paged' => $page		);		$dd_product_query = new WP_Query($ddargs);		if($dd_product_query->have_posts()) {			while($dd_product_query->have_posts()) {				$dd_product_query->the_post();				$product_id = $dd_product_query->post->ID;				$mobile_class = 'col-xs-6';				$products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);			}		}		wp_reset_postdata();		wp_reset_query();		$pagination = mm_pagenavi_ajax( array('echo'=> false, 'query' => $dd_product_query) );		return array("products"=>$products, "pagination"=>$pagination);	}	public function fresh_products_paginate($page, $city) {		global $MMGlobalFunctions;		$cols = 4;		$posts_per_page = 15;		$freshargs = array(			'post_type' => 'product',			'post_status' => 'publish',			'meta_key' => 'no_deal_discount',			'orderby' => 'date',			'order' => 'DESC',			'meta_query' => array(				array(			        'key' => 'city',			        'value' => $city,			        'compare'       => '==',			        'type'          => 'CHAR'			    )			),			'posts_per_page' => $posts_per_page,			'paged' => $page		);		$fresh_product_query = new WP_Query($freshargs);								if($fresh_product_query->have_posts()) {				while($fresh_product_query->have_posts()) {					$fresh_product_query->the_post();					$product_id = $fresh_product_query->post->ID;					$mobile_class = 'col-xs-6';		 			$products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);				}		}		wp_reset_postdata();		wp_reset_query();		$pagination = mm_pagenavi_ajax( array('echo'=> false, 'query' => $fresh_product_query) );		return array("products"=>$products, "pagination"=>$pagination);	}	public function category_products_paginate($page, $city, $product_cats) {		global $MMGlobalFunctions;		$terms = array($product_cats);		$posts_per_page = 15;		$cols = 4;		$dnd = isset($_GET['dnd']) ? $_GET['dnd'] : '_product_dd_ndd_order';				$products = "";		$args = array(		  'post_type' => 'product',		  'post_status' => 'publish',		  'meta_key' => $dnd,		  'orderby' => 'meta_value_num',		  'order' => 'DESC',		  'meta_query' => array(		    array(		          'key' => 'city',		          'value' => $city,		          'compare'       => '==',		          'type'          => 'CHAR'		      )		    ),		  'tax_query' => array(		    array(		      'taxonomy' => 'product_cat',		      'field'    => 'id',		      'terms'    => $terms,		    )		  ),		  'posts_per_page' => $posts_per_page,		  'paged' => $page,		);		$product_query = new My_WP_Query($args);				if($product_query->have_posts()) {		  while ($product_query->have_posts()) : $product_query->the_post(); 		  $product_id = $product_query->post->ID;		  $mobile_class = 'col-xs-6';		  $products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);		  endwhile; 		}				$pagination = mm_pagenavi_ajax( array('echo'=> false, 'query' => $product_query) );		wp_reset_postdata();		$product_query = null;		return array("products"=>$products, "pagination"=>$pagination);	}	public function products_search_page_paginate($page, $city, $search_term) {		global $MMGlobalFunctions, $wpdb;				$posts_per_page = 15;		$cols = 4;		$dnd = isset($_GET['dnd']) ? $_GET['dnd'] : '_product_dd_ndd_order';				$products = "";		$args = array(		  'post_type' => 'product',		  'post_status' => 'publish',		  'meta_key' => $dnd,		  'orderby' => 'meta_value_num',		  'order' => 'DESC',		  'meta_query' => array(		    array(		          'key' => 'city',		          'value' => $city,		          'compare'       => '==',		          'type'          => 'CHAR'		      )		    ),		  		  'posts_per_page' => $posts_per_page,		  'paged' => $page,		);		$product_query = new MY_WP_Query($args);				if($product_query->have_posts()) {		  while ($product_query->have_posts()) : $product_query->the_post(); 		  $product_id = $product_query->post->ID;		  $mobile_class = 'col-xs-6';		  $products .= $MMGlobalFunctions->each_product_view_html($product_id, $cols, '', $mobile_class);		  endwhile; 		}				$pagination = mm_pagenavi_ajax( array('echo'=> false, 'query' => $product_query) );		wp_reset_postdata();		$product_query = null;		return array("products"=>$products, "pagination"=>$pagination);	}}new MM_AJAX();class My_WP_Query extends WP_Query {	function __construct( $args = array() ) {		// Force these args		$args = array_merge( $args, array() );		add_filter( 'posts_join', array( $this, 'posts_join' ) );		add_filter( 'posts_where', array( $this, 'posts_where' ) );		parent::__construct( $args );				remove_filter( 'posts_join', array( $this, 'posts_join' ) );		remove_filter( 'posts_where', array( $this, 'posts_where' ) );			}		function posts_join( $sql ) {		global $wpdb;		//$sql = str_replace("INNER JOIN $wpdb->postmeta AS mt1 ON ($wpdb->posts.ID = mt1.post_id)", "", $sql);		if( ( isset($_GET['min_price']) && trim($_GET['min_price'])!='') && ( isset($_GET['max_price']) && trim($_GET['max_price'])!='')  ) {			$sql .= "			 								INNER JOIN $wpdb->postmeta AS mt2 ON ($wpdb->posts.ID = mt2.post_id) 			";		} 		if($_GET['search_term']!='') {			$search_term = $_GET['search_term'];			$search_term = str_replace("+", " ", $search_term);			$search_terms_arr = explode(" ", $search_term);			if(!empty($search_terms_arr)) {				foreach($search_terms_arr as $mt => $joinvalue) {					$mt = $mt + 3;					$sql .= "			 										INNER JOIN $wpdb->postmeta AS mt$mt ON ($wpdb->posts.ID = mt$mt.post_id) 					";				}			}											}		return $sql;	}	function posts_where( $sql ) {		global $wpdb;		$city = isset($_GET['city']) ? $_GET['city'] : 'pune';		$sql = str_replace("AND  (CAST(mt1.meta_value AS CHAR) = '".$city."')", "", $sql);						$sql .= " AND (mt1.meta_key = 'city' AND CAST(mt1.meta_value AS CHAR) = '".$city."')";				if( ( isset($_GET['min_price']) && trim($_GET['min_price'])!='') && ( isset($_GET['max_price']) && trim($_GET['max_price'])!='')  ) {			$min_price = $_GET['min_price'];			$max_price = $_GET['max_price'];			$sql .= " AND (mt2.meta_key = '_price' AND CAST(mt2.meta_value AS SIGNED) BETWEEN '".$min_price."' AND '".$max_price."') ";		} 		if($_GET['search_term']!='') {			$search_term = $_GET['search_term'];			$search_term = str_replace("+", " ", $search_term);			$search_terms_arr = explode(" ", $search_term);			if(!empty($search_terms_arr)) {				$known_keywords = array('men', 'women', 'kids');				foreach($search_terms_arr as $m => $search_term) {					$m = $m + 3;					//$sql .= " AND (mt$m.meta_key = 'product_search_meta' AND CAST(mt$m.meta_value AS CHAR) REGEXP '[[:<:]]".$search_term."[[:>:]])";					$search_term = depluralize($search_term);					if(in_array($search_term, $known_keywords)) {						$sql .= " AND (mt$m.meta_key = 'product_search_meta' AND CAST(mt$m.meta_value AS CHAR) = '$search_term')";					} else {						$sql .= " AND (mt$m.meta_key = 'product_search_meta' AND CAST(mt$m.meta_value AS CHAR) LIKE '%".$search_term."%')";					}									}			}				} 			return $sql;	}	}